.\" $Id$
.TH PAPI_reset 3 "November, 2003" "PAPI Programmer's Reference" "PAPI"

.SH NAME
PAPI_reset \- reset the hardware event counts in an EventSet

.SH SYNOPSIS
.B C Interface
.nf
.B #include <papi.h>
.BI "int\ PAPI_reset (int " EventSet ");"
.fi
.B Fortran Interface
.nf
.B #include "fpapi.h"
.BI PAPIF_reset(C_INT\  EventSet,\  C_INT\  check )
.fi

.SH DESCRIPTION
.B PAPI_reset()
zeroes the values of the counters contained in 
.IR EventSet "."

.SH ARGUMENTS
.I "EventSet"
--  an integer handle for a PAPI event set as created by
.BR "PAPI_create_eventset" (3)

.SH RETURN VALUES
On success, this function returns
.B "PAPI_OK."
 On error, a non-zero error code is returned.

.SH ERRORS
.TP
.B "PAPI_ESYS"
A system or C library call failed inside PAPI, see the 
.I "errno"
variable.
.TP
.B "PAPI_ENOEVST"
The EventSet specified does not exist.

.SH EXAMPLES
.nf         
.if t .ft CW
int EventSet = PAPI_NULL;
unsigned int native = 0x0;
long_long values[1];
 	
if (PAPI_create_eventset(&EventSet) != PAPI_OK)
  handle_error(1);

/* Add Total Instructions Executed to our EventSet */

if (PAPI_add_event(EventSet, PAPI_TOT_INS) != PAPI_OK)
  handle_error(1);

/* Start counting */

if (PAPI_start(EventSet) != PAPI_OK)
  handle_error(1);

poorly_tuned_function();

if (PAPI_stop(EventSet, values) != PAPI_OK)
  handle_error(1);

printf("%lld\en",values[0]);

if (PAPI_reset(EventSet, values) != PAPI_OK)
  handle_error(1);
.if t .ft P
.fi

.SH AUTHORS
The PAPI Team. See them at the PAPI Web Site: 
http://icl.cs.utk.edu/projects/papi

.SH BUGS
This function has no known bugs.

.SH SEE ALSO
.BR PAPI_add_event "(3), " PAPI_reset "(3), " PAPI_read "(3), "
.BR PAPI_set_opt "(3), " PAPI_remove_event "(3), " 
.BR PAPI_cleanup_eventset "(3), " PAPI_destroy_eventset "(3)" 
