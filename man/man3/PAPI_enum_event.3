.\" $Id$
.TH PAPI_enum_event 3 "November, 2003" "PAPI Programmer's Reference" "PAPI"

*
* This is a placeholder. It needs a total rewrite.
*

.SH NAME
.nf
PAPI_enum_event \- query if PAPI event exists
.fi

.SH SYNOPSIS
.B C Interface
.nf
.B #include <papi.h>
.BI "int PAPI_query_event(int " EventCode ");"
.BI "int PAPI_query_event_verbose(int " EventCode ", PAPI_preset_info_t *" info ");"
.BI "const PAPI_preset_info_t* PAPI_query_all_events_verbose(\|);"
.fi
.B Fortran Interface
.nf
.B #include "fpapi.h"
.BI PAPIF_query_event(C_INT\  EventCode,\  C_INT\  check )
.BI PAPIF_query_event_verbose(C_INT\  EventCode,\  C_STRING\  EventName,\  
           C_STRING\ EventDescr,\  C_STRING\ EventLabel,\  C_INT\  avail,\ 
           C_STRING\ EventNote,\  C_INT\  flags,\  C_INT\  check )
.fi

.SH DESCRIPTION
.B "PAPI_query_event()"
asks the PAPI library if the PAPI Preset event can be counted on this
architecture. If the event CAN be counted, the function returns
PAPI_OK.  If the event CANNOT be counted, the function returns an
error code.  This function also can be used to
check the syntax of a native event.

.B "PAPI_query_event_verbose()"
asks the PAPI library for a copy of an event descriptor. This
descriptor can then be used to investigate the details about the
event. In Fortran, the individual fields in the descriptor are 
returned as parameters.

.B "PAPI_query_all_events_verbose()"
is implemented only in C. It asks the PAPI library to return a pointer 
to an array of event descriptors. The number of objects in the array is
.B PAPI_MAX_PRESET_EVENTS
and each object is a descriptor as returned by
.B PAPI_query_event_verbose(\|).

.SH ARGUMENTS
.I EventCode
-- a defined event such as PAPI_TOT_INS.
.LP
.I EventName
-- the event name as described in
.BR PAPI_presets(3) .
.LP
.I EventDescr
-- a descriptive string for the event of length less than
.BR PAPI_MAX_STR_LEN .
.LP
.I EventLabel
-- a short descriptive label for the event of length less than 18 characters.
.LP
.I avail
-- zero if the event CANNOT be counted.
.LP
.I EventNote
-- additional text information about an event if available.
.LP
.I flags
-- provides additional information about an event, e.g., 
.B "PAPI_DERIVED" 
for an event derived from 2 or more other events.

.SH RETURN VALUES
On success, 
.BR PAPI_query_event " and " PAPI_query_event_verbose " return"
.B "PAPI_OK" ,
and on error, a non-zero error code is returned.

.B PAPI_query_all_events_verbose
returns a pointer to an array of 
.I PAPI_preset_info_t 
structures on success, and a NULL pointer on error.


.SH ERRORS
.TP
.B "PAPI_EINVAL"
One or more of the arguments is invalid.
.TP
.B "PAPI_ENOTPRESET"
The hardware event specified is not a valid PAPI preset. 
.TP
.B "PAPI_ENOEVNT"
The PAPI preset is not available on the underlying hardware. 

.SH EXAMPLES
.nf
.if t .ft CW
int EventSet = PAPI_NULL;
unsigned int native = 0x0;
int retval,i;
PAPI_preset_info_t info;
PAPI_preset_info_t *infostructs;

/* Initialize the library */

retval = PAPI_library_init(PAPI_VER_CURRENT);

if (retval != PAPI_VER_CURRENT) {
  fprintf(stderr,"PAPI library init error!\\n");
  exit(1); }
	
if (PAPI_query_event(PAPI_TOT_INS) != PAPI_OK) {
  fprintf(stderr,"No instruction counter? How lame.\\n");
  exit(1);
  }
	
if (PAPI_query_event_verbose(PAPI_TOT_INS,&info) != PAPI_OK) {
  fprintf(stderr,"No instruction counter? How lame.\\n");
  exit(1);
  }

if(info.avail) 
  printf("This event is available on this hardware.\\n");

if(info.flags & PAPI_DERIVED) 
  printf("This event is a derived event on this hardware.\\n");

retval=0;
infostructs=PAPI_query_all_events_verbose();
if(infostructs)
  for(i=0;i<PAPI_MAX_PRESET_EVENTS;i++) 
    if(infostructs[i].avail)
      retval += 1;

.if t .ft P
.fi

.SH AUTHOR
Philip J. Mucci <mucci@cs.utk.edu>

.SH BUGS
These functions have no known bugs.

.SH SEE ALSO
.BR PAPI_preset "(3), " PAPI_native "(3), "
.BR PAPI_set_opt "(3), " PAPI_start "(3), " PAPI_remove_event "(3), " 
.BR PAPI_remove_events "(3), "
.BR PAPI_cleanup_eventset "(3), " PAPI_destroy_eventset "(3), " 

.SH
The PAPI Web Site: 
http://icl.cs.utk.edu/projects/papi

