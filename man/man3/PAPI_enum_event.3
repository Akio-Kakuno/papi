.\" $Id$
.TH PAPI_enum_event 3 "November, 2003" "PAPI Programmer's Reference" "PAPI"

.SH NAME
.nf
PAPI_enum_event \- enumerate PAPI preset or native events
.fi

.SH SYNOPSIS
.B C Interface
.nf
.B #include <papi.h>
.BI "int PAPI_enum_event(int " *EventCode, "int " modifer ");"
.fi
.B Fortran Interface
.nf
.B #include "fpapi.h"
.BI PAPIF_enum_event(C_INT\  EventCode,\  C_INT\  modifier ,\  C_INT\  check )
.fi

.SH DESCRIPTION
Given a preset or native event code,
.B "PAPI_enum_event()"
replaces the event code with the next available event in either the preset or native table. 
The 
.I modifier
argument affects which events are returned. For preset events, a 
TRUE (non-zero) value directs the function to return event codes only for 
PAPI preset events available on this platform. Otherwise all events 
in the preset table are returned. For native events, the effect of the
.I modifier 
argument is different on each platform. See native_avail.c or your 
platform-specific PAPI documentation for details.


.SH ARGUMENTS
.I EventCode
-- a defined preset or native event such as PAPI_TOT_INS.
.LP
.I modifier
-- modifies the search logic. For preset events, TRUE specifies available events only.
For native events, each platform behaves differently. 
See platform-specific documentation for details

.SH RETURN VALUES
On success, this function returns
.B "PAPI_OK" ,
and on error, a non-zero error code is returned.

.SH ERRORS
.TP
.B "PAPI_EINVAL"
One or more of the arguments (typically 
.I modifier) 
is invalid.
.TP
.B "PAPI_ENOEVNT"
The next requested PAPI preset or native event is not available on the underlying hardware. 

.SH EXAMPLES
.nf
.if t .ft CW
   int i = 0 | NATIVE_MASK;
   int retval;
   PAPI_event_info_t info;

/* Initialize the library */

retval = PAPI_library_init(PAPI_VER_CURRENT);

if (retval != PAPI_VER_CURRENT) {
  fprintf(stderr,"PAPI library init error!\\n");
  exit(1); }

/* Scan for all supported native events on this platform */

   printf("Name\t\t\t       Code\t   Description\n");
   do {
         retval = PAPI_get_event_info(i, &info);
         if (retval == PAPI_OK) {
            printf("%-30s 0x%-10x\n%s\n", info.symbol, info.event_code, info.long_descr);
         }
   } while (PAPI_enum_event(&i, 0) == PAPI_OK);

.if t .ft P
.fi

.SH AUTHORS
The PAPI Team. See them at the PAPI Web Site: 
http://icl.cs.utk.edu/projects/papi

.SH BUGS
This function has no known bugs.

.SH SEE ALSO
.BR PAPI_preset "(3), " PAPI_native "(3), "
.BR PAPI_get_event_info "(3), " PAPI_library_init "(3)" 


