.\" $Id$
.TH PAPI_get_opt 3 "October, 2000" "" "PAPI"

.SH NAME
PAPI_get_opt, PAPI_set_opt \- get/set options to PAPI and PAPI EventSets

.SH SYNOPSIS
.LP
int PAPI_get_opt (int option, PAPI_option_t *ptr)
.LP
int option -- integer code for multiplexing or debug or overflow
.LP
PAPI_option_t *ptr -- ptr to arguments for different options
.LP

.SH DESCRIPTION
.LP
.B PAPI_get_opt(\|)
.LP
This funtions queries the status of tunable options in the 
PerfAPI Library.  "option" is an input/output parameter.  The
"ptr" structure is for input and output.  Not all options
fill the  PAPI_option_t structure.  This function has a C binding
only.
.LP
The reader is urged to carefully read the PerfAPI Draft for a
complete discussion of PAPI_get_opt.  The file papi.h contains
definitions for the structures unioned in the PAPI_option_t structure.  
.LP
The return value is an integer that indicates whether the call
succeeded (PAPI_OK) or failed (not PAPI_OK).  
.LP
.SH DEFINITION OF CONSTANTS
.nf 
.B PAPI_GET_CLOCKRATE  \tClock rate MHz, this platform
.B PAPI_GET_MAX_HWCTRS  Max hw ctrs, this platform
.B PAPI_GET_DOMAIN     \tDomain for a single EventSet
.B PAPI_GET_DEFDOM     \tDomain for all new EventsSets
.B PAPI_GET_GRANU      \tGranularity for an eventset
.B PAPI_GET_DEFGRN     \tGranularity for all new eventsets
.B PAPI_GET_INHERIT    \tGet the setting for "inherit"  
.B PAPI_GET_MPXRES     \tGet the current mpx interval in ms 
.B PAPI_DEBUG          \t\tGet the state of DEBUG
.B PAPI_GET_OVERFLO    \tGet status of overflow reporting
.fi
.LP 

.SH RETURN VALUES
On success, this function returns
.I "PAPI_OK."
On error, a non-zero error code is returned.

.SH ERRORS
.TP
.B "PAPI_EINVAL"
One or more of the arguments is invalid.
.TP
.B "PAPI_ENOEVST"
The EventSet specified does not exist.
.TP
.B "PAPI_EISRUN"
The EventSet is currently counting events.

.SH EXAMPLES
.LP

  int num, EventSet = PAPI_NULL;
  PAPI_option_t options;
.LP
	
  if ((num = PAPI_get_opt(PAPI_GET_MAX_HWCTRS,NULL)) <= 0)
    handle_error(1);

  printf("This machine has %d actual hardware counters.\n");

  if (PAPI_create_eventset(&EventSet) != PAPI_OK)
    handle_error(1);

  /* Set the domain of this EventSet to counter user and kernel modes*/
	
  memset(&options,0x0,sizeof(options));
  options.domain.eventset = EventSet;
  options.domain.domain = PAPI_DOM_ALL;
  if (PAPI_set_opt(PAPI_SET_DOMAIN, &options) != PAPI_OK)
    handle_error(1);

.SH AUTHOR
Philip J. Mucci <mucci@cs.utk.edu>

.SH BUGS
This function has no known bugs.

.SH SEE ALSO
.BR PAPI_create_eventset "(3), " PAPI_add_event "(3), " PAPI_start "(3), " 
.BR PAPI_stop "(3), " PAPI_rem_event "(3), " 
The PAPI Web Site: 
.B http://icl.cs.utk.edu/projects/papi
