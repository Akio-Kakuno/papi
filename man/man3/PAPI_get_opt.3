.\" $Id$
.TH PAPI_get_opt 3 "October, 2000" "" "PAPI"

.SH NAME
PAPI_get_opt, PAPI_set_opt \- get/set PAPI library or EventSet options

.SH SYNOPSIS
.B #include <papi.h>

.nf
.BI "int PAPI_get_opt(int " option ", PAPI_option_t *" ptr ");"
.BI "int PAPI_set_opt(int " option ", PAPI_option_t *" ptr ");"
.if

.SH DESCRIPTION
.B PAPI_get_opt()
and
.B PAPI_set_opt() query or change the options of the PAPI library
or a specific EventSet created by
.BR "PAPI_create_eventset" (3).
These functions have a C interface only.
Not all options require or return information in the
PAPI_option_t structure.  
.LP
The reader is urged to see the example code in the PAPI distribution
for usage of PAPI_get_opt.  The file papi.h contains
definitions for the structures unioned in the PAPI_option_t structure.  

.I "option"
is an input parameter, one of the following constants.  

.nf 
.B PAPI_GET_CLOCKRATE  \tReturn MHz of this platform.
.B PAPI_GET_MAX_CPUS  \tReturn number of CPUs.
.B PAPI_GET_MAX_HWCTRS  Return number of counters.
.B PAPI_GET_DEFDOM     \tReturn default counting domain.
.B PAPI_GET_EXEINFO    \tAddresses for text/data/bss.
.B PAPI_GET_HWINFO     \tInfo. about hardware.
.B PAPI_GET_DOMAIN     \tGet domain for a single EventSet.
.B PAPI_SET_DOMAIN     \tSet...
.B PAPI_GET_PRELOAD    \tGet "LD_PRELOAD" equivalent.
.B PAPI_GET_DEBUG      \tGet the PAPI debug state.
.B PAPI_SET_DEBUG      \tSet...
.fi

.I "ptr"
is both an input and output parameter. It is defined as
follows:

.nf
typedef union {
  PAPI_preload_option_t preload;
  PAPI_debug_option_t debug;
  PAPI_inherit_option_t inherit;
  PAPI_granularity_option_t granularity; 
  PAPI_granularity_option_t defgranularity; 
  PAPI_domain_option_t domain; 
  PAPI_domain_option_t defdomain; 
  PAPI_hw_info_t *hw_info;
  PAPI_exe_info_t *exe_info; } PAPI_option_t;
.if

.SH RETURN VALUES
On success, this function returns
.I "PAPI_OK."
On error, a non-zero error code is returned.

.SH ERRORS
.TP
.B "PAPI_EINVAL"
One or more of the arguments is invalid.
.TP
.B "PAPI_ENOEVST"
The EventSet specified does not exist.
.TP
.B "PAPI_EISRUN"
The EventSet is currently counting events.

.SH EXAMPLES
.LP
.nf
.if t .ft CW
int num, EventSet = PAPI_NULL;
PAPI_option_t options;

if ((num = PAPI_get_opt(PAPI_GET_MAX_HWCTRS,NULL)) <= 0)
  handle_error();

printf("This machine has %d counters.\n",num);

if (PAPI_create_eventset(&EventSet) != PAPI_OK)
  handle_error();

/* Set the domain of this EventSet 
   to counter user and kernel modes for this
   process */
	
memset(&options,0x0,sizeof(options));

options.domain.eventset = EventSet;
options.domain.domain = PAPI_DOM_ALL;
if (PAPI_set_opt(PAPI_SET_DOMAIN, &options) != PAPI_OK)
  handle_error();
.if t .ft P
.fi

.SH AUTHOR
Philip J. Mucci <mucci@cs.utk.edu>

.SH BUGS
This woeful excuse for a man page.

.SH SEE ALSO
.BR PAPI_create_eventset "(3), " PAPI_add_event "(3), " PAPI_start "(3), " 
The\ PAPI\ Web\ Site: 
.B http://icl.cs.utk.edu/projects/papi
