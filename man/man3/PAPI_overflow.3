.\" $Id$
.TH PAPI_overflow 3 "November, 2003" "PAPI Programmer's Reference" "PAPI"

.SH NAME
PAPI_overflow \- set up an event set 
to begin registering overflows; 

.SH SYNOPSIS
.B C Interface
.nf
.B #include <papi.h>
.BI "int\ PAPI_overflow (int " EventSet ", int " EventCode ", int " threshold ", int " flags ", PAPI_overflow_handler_t " handler ");"
.fi
.B Fortran Interface
.nf
.I Not implemented
.fi

.SH DESCRIPTION
.B PAPI_overflow()
marks a specific 
.I EventCode 
in an 
.I EventSet 
to generate an overflow signal after every 
.I threshold
events are counted. More than one event in an event set can be used as 
an overflow trigger.
.B To turn off overflow, set the threshold to 0. If you see negative number
or small number for the result of the overflow events, don't be surprised.  To reduce the overhead of PAPI_read, we don't adjust the number. If the platform use hardware overflow, then you can based on the threshold and how many times it overflowed, you can get an approximate number. 

.SH ARGUMENTS
.I EventSet 
-- a reference to the event set to use
.LP
.I EventCode 
-- the counter to be used for overflow detection
.LP
.I threshold 
-- the overflow threshold value to use
.LP
.I flags 
-- bit map that controls the overflow mode of operation. This is
currently not used and should be set to 0.
.LP
.I handler 
-- the handler function to call upon overflow
.LP
.I context 
-- a platform dependent structure containing information about the overflow event.
This structure is typically returned automatically by the signal handler.

.SH RETURN VALUES
On success, PAPI_overflow returns
.B "PAPI_OK."
 On error, a non-zero error code is returned.

.SH ERRORS
.TP
.B "PAPI_EINVAL"
One or more of the arguments is invalid.
.TP
.B "PAPI_ENOMEM"
Insufficient memory to complete the operation.
.TP
.B "PAPI_ENOEVST"
The EventSet specified does not exist.
.TP
.B "PAPI_EISRUN"
The EventSet is currently counting events.
.TP
.B "PAPI_ECNFLCT"
The underlying counter hardware can not count this event and other events
in the EventSet simultaneously.
.TP
.B "PAPI_ENOEVNT"
The PAPI preset is not available on the underlying hardware. 

.SH EXAMPLES
.nf
.if t .ft CW
void handler(int EventSet, void *address, long_long overflow_vector)
{
  fprintf(stderr,"Overflow at %p! bit=0x%llx \en",
	  address,overflow_vector);
}

  int EventSet = PAPI_NULL;
	
  if (PAPI_create_eventset(&EventSet) != PAPI_OK)
    handle_error(1);

  /* Add Total Instructions Executed to our EventSet */

  if (PAPI_add_event(EventSet, PAPI_TOT_INS) != PAPI_OK)
    handle_error(1);

  /* Call handler every 100000 instructions */

  retval = PAPI_overflow(EventSet, PAPI_TOT_INS, THRESHOLD, 0, handler);
  if (retval != PAPI_OK)
    exit(1);

  /* Start counting */

  if (PAPI_start(EventSet) != PAPI_OK)
    handle_error(1);

.if t .ft P
.fi

.SH AUTHORS
The PAPI Team. See them at the PAPI Web Site: 
http://icl.cs.utk.edu/projects/papi

.SH BUGS
These functions have no known bugs.

.SH SEE ALSO
.BR PAPI_preset "(3), "
.BR PAPI_set_opt "(3), " PAPI_start "(3), " PAPI_remove_event "(3), " 
.BR PAPI_remove_events "(3), " PAPI_query "(3), "
.BR PAPI_cleanup_eventset "(3), " PAPI_destroy_eventset "(3)"
