.\" $Id$
.TH PAPI_destroy_eventset 3 "September, 2004"  "PAPI Programmer's Reference" "PAPI"

.SH NAME
PAPI_cleanup_eventset, PAPI_destroy_eventset  \-  empty and destroy an EventSet

.SH SYNOPSIS
.B C Interface
.nf
.B #include <papi.h>
.BI "int\ PAPI_cleanup_eventset(int " EventSet ");"
.BI "int\ PAPI_destroy_eventset(int *" EventSet ");"
.fi
.B Fortran Interface
.nf
.B #include "fpapi.h"
.BI PAPIF_cleanup_eventset(C_INT\  EventSet,\  C_INT\  check )
.BI PAPIF_destroy_eventset(C_INT\  EventSet,\  C_INT\  check )
.fi

.SH DESCRIPTION
.B PAPI_cleanup_eventset()
removes all events from a PAPI event set. 

.B PAPI_destroy_eventset()
deallocates the memory associated with an empty PAPI event set.

.SH ARGUMENTS
.I "EventSet"
--  an integer handle for a PAPI event set as created by
.BR "PAPI_create_eventset" (3)

.SH RETURN VALUES
.nf
On success, these functions return PAPI_OK.
On error, a non-zero error code is returned.
.fi

.SH ERRORS
.TP
.B "PAPI_EINVAL"
One or more of the arguments is invalid. Attempting to
destroy a non-empty event set is one such case.
.TP
.B "PAPI_ENOEVST"
The EventSet specified does not exist.
.TP
.B "PAPI_EISRUN"
The EventSet is currently counting events.
.TP
.B "PAPI_EBUG"
Internal error, send mail to ptools-perfapi@ptools.org and complain.

.SH EXAMPLES
.nf
.if t .ft CW
if (PAPI_stop(EventSet, values) != PAPI_OK)
  handle_error(1);

/* Remove all events in the eventset */

if (PAPI_cleanup_eventset(EventSet) != PAPI_OK)
  handle_error(1);

/* Free all memory and data structures, EventSet must be empty. */

if (PAPI_destroy_eventset(&EventSet) != PAPI_OK)
  handle_error(1);
.if t .ft P
.fi

.SH BUGS
These functions have no known bugs.

.SH SEE ALSO
.BR PAPI_create_eventset "(3), " PAPI_query_event "(3), "
.BR PAPI_add_event "(3), " PAPI_start "(3), " PAPI_remove_event "(3), " 
.BR PAPI_remove_events "(3), " PAPI_shutdown "(3)"
