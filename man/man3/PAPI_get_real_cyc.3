.\" $Id$
.TH PAPI_get_real_cyc 3 "September, 2004" "PAPI Programmer's Reference" "PAPI"

.SH NAME
PAPI_get_real_cyc \- get real time counter value in clock cycles
.LP
PAPI_get_real_usec \- get real time counter value in microseconds

.SH SYNOPSIS
.B C Interface
.nf
.B #include <papi.h>
.BI "long_long PAPI_get_real_cyc(void);"
.BI "long_long PAPI_get_real_usec(void);"
.BI "long_long PAPI_get_real_ns(void);"
.fi
.B Fortran Interface
.nf
.B #include "fpapi.h"
.BI PAPIF_get_real_usec(C_LONG_LONG\  us)
.BI PAPIF_get_real_cyc(C_LONG_LONG\  cyc)
.BI PAPIF_get_real_ns(C_LONG_LONG\  ns)
.fi

.SH DESCRIPTION
Both of these functions return the total real time passed since 
some arbitrary starting point. The time is returned in clock cycles 
or microseconds respectively. These calls are equivalent to
wall clock time. 

.SH ERRORS
These functions always succeed.

.SH EXAMPLE
.LP
.nf
.if t .ft CW
s = PAPI_get_real_cyc();
your_slow_code();
e = PAPI_get_real_cyc();
printf("Wallclock cycles: %lld\en",e-s);
.if t .ft P
.fi

.SH BUGS
These functions have no known bugs.

.SH SEE ALSO
.BR PAPI_library_init "(3), "
.BR PAPI_get_virt_cyc "(3), " 
.BR PAPI_get_virt_usec "(3), " 
.BR PAPI "(3), " 
.BR PAPIF "(3)" 
