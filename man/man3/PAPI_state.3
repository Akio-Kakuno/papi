.\" $Id$
.TH PAPI_state 3

.SH NAME
PAPI_state \- return the counting state of an EventSet

.SH SYNOPSIS
.B #include <papi.h>

.BI "int\ PAPI_state (int " EventSet ", int *" status ");"

.SH DESCRIPTION
.B PAPI_state() 
returns the counting state of 
.I EventSet
in the form of indicator bits in 
.IR status "."
.LP
The values can be boolean combinations of one or more of the following
nonzero constants as defined in the PAPI header file, 
.BR papi.h "."

.nf
.B PAPI_STOPPED
.B PAPI_RUNNING      
.B PAPI_OVERFLOWING  
.B PAPI_PROFILING    
.if

.SH RETURN VALUES
On success, this function returns
.I "PAPI_OK."
On error, a non-zero error code is returned.

.SH ERRORS
.TP
.B "PAPI_EINVAL"
One or more of the arguments is invalid.
.TP
.B "PAPI_ENOEVST"
The EventSet specified does not exist.

.SH EXAMPLES
.nf
int EventSet = PAPI_NULL;
int status = 0;  

if (PAPI_create_eventset(&EventSet) != PAPI_OK)
  handle_error(1);

/* Add Total Instructions Executed to our EventSet */

if (PAPI_add_event(&EventSet, PAPI_TOT_INS) != PAPI_OK)
  handle_error(1);

/* Start counting */

if (PAPI_state(EventSet, &status) != PAPI_OK)
  handle_error(1);

printf("State is now %d\en",status);

if (PAPI_start(EventSet) != PAPI_OK)
  handle_error(1);

if (PAPI_state(EventSet, &status) != PAPI_OK)
  handle_error(1);

printf("State is now %d\en",status);
.fi

.SH AUTHOR
Philip J. Mucci <mucci@cs.utk.edu>

.SH BUGS
This function has no known bugs.

.SH SEE ALSO
.BR PAPI_start "(3), " 
.BR PAPI_stop "(3), "
The PAPI Web Site: 
.B http://icl.cs.utk.edu/projects/papi
