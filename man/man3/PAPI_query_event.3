.\" $Id$
.TH PAPI_query_event 3 "October, 2000" "PAPI Programmer's Manual" "PAPI"

.SH NAME
.nf
PAPI_query_event \- query if PAPI event exists
PAPI_query_event_verbose \- query details of a PAPI event
PAPI_query_all_events_verbose \- acquire details of all PAPI events
.fi

.SH SYNOPSIS
.B #include <papi.h>

.nf
.BI "int PAPI_query_event(int " EventCode ");"
.BI "int PAPI_query_event_verbose(int " EventCode ", PAPI_preset_info_t *" info ");"
.BI "const PAPI_preset_info_t* PAPI_query_all_events_verbose(\|);"
.fi

.SH DESCRIPTION
.B "PAPI_query_event()"
asks the hardware if the PAPI Preset event can be counted on this
architecture. If the event CAN be counted, the function returns
PAPI_OK.  If the event CANNOT be counted, the function returns an
error code.  On some platforms, this function also can be used to
check the syntax of a native event.

.B "PAPI_query_event_verbose()"
asks the PAPI libraryfor a copy of an event descriptor. This
descriptor can then be used to investigate the details about the
event.

.B "PAPI_query_all_events_verbose()"
asks the PAPI library to return a pointer to an array of event
descriptors. The number of objects in the array is
.B PAPI_MAX_PRESET_EVENTS
and each object is a structure as returned by
PAPI_query_event_verbose(\|).

.SH RETURN VALUES
On success, 
.BR PAPI_query_event " and " PAPI_query_event_verbose " returns"
.IR "PAPI_OK" ,
and on error, a non-zero error code is returned.

.B PAPI_query_all_events_verbose
returns a non NULL pointer on success.


.SH ERRORS
.TP
.B "PAPI_EINVAL"
One or more of the arguments is invalid.
.TP
.B "PAPI_ENOMEM"
Insufficient memory to complete the operation.
.TP
.B "PAPI_ENOEVST"
The EventSet specified does not exist.
.TP
.B "PAPI_EISRUN"
The EventSet is currently counting events.
.TP
.B "PAPI_ECNFLCT"
The underlying counter hardware can not count this event and other events
in the EventSet simultaneously.
.TP
.B "PAPI_NOEVNT"
The PAPI preset is not available on the underlying hardware. 

.SH EXAMPLES
.LP
.nf
.if t .ft CW
int EventSet = PAPI_NULL;
unsigned int native = 0x0;
int retval,i;
PAPI_preset_info_t info;
PAPI_preset_info_t *infostructs;

/* Initialize the library */

retval = PAPI_library_init(PAPI_VER_CURRENT);

if (retval != PAPI_VER_CURRENT) {
  fprintf(stderr,"PAPI library init error!\\n");
  exit(1); }
	
if (PAPI_query_event(PAPI_TOT_INS) != PAPI_OK) {
  fprintf(stderr,"No instruction counter? How lame.\\n");
  exit(1);
  }
	
if (PAPI_query_event_verbose(PAPI_TOT_INS,&info) != PAPI_OK) {
  fprintf(stderr,"No instruction counter? How lame.\\n");
  exit(1);
  }

if(info.avail) 
  printf("This event is available on this hardware.\\n");

if(info.flags & PAPI_DERIVED) 
  printf("This event is a derived event on this hardware.\\n");

retval=0;
infostructs=PAPI_query_all_events_verbose();
if(infostructs)
  for(i=0;i<PAPI_MAX_PRESET_EVENTS;i++) 
    if(infostructs[i].avail)
      retval += 1;

.if t .ft P
.fi

.SH AUTHOR
Philip J. Mucci <mucci@cs.utk.edu>

.SH BUGS
These functions have no known bugs.

.SH SEE ALSO
.BR PAPI_preset "(3), " PAPI_native "(3), "
.BR PAPI_set_opt "(3), " PAPI_start "(3), " PAPI_rem_event "(3), " 
.BR PAPI_rem_events "(3), " PAPI_query "(3), "
.BR PAPI_cleanup_eventset "(3), " PAPI_destroy_eventset "(3), " 
The\ PAPI\ Web\ Site: 
.B http://icl.cs.utk.edu/projects/papi

