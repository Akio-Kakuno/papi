.\" @(#)$Id$
.TH PAPI_profil 3 "November, 2003" "PAPI Programmer's Reference" "PAPI"

.SH NAME
PAPI_profil, PAPI_sprofil \- generate PC histogram data where hardware counter overflow occurs

.SH SYNOPSIS
.B C Interface
.nf
.B #include <papi.h>
.BI int\ PAPI_profil(void\ *\  buf,\  unsigned\  bufsiz,\  unsigned\ long\  offset,\  
.BI \tunsigned\  scale, \ int \ EventSet, \
           \  int\  EventCode,\  int\  threshold,\  int\  flags );
.BI int\ PAPI_sprofil(PAPI_sprofil_t\ *\  prof,\  int\  profcnt,\  int\  EventSet,\  
.BI \tint\  EventCode,\  int\  threshold,\  int\  flags\  );
.fi
.LP
.B Fortran Interface
.nf
The profiling routines have no Fortran interface.
.fi

.SH DESCRIPTION
.B PAPI_profil() 
uses its first four parameters to create the data structures needed by PAPI_sprofil
and then calls PAPI_sprofil to do the work.

.B PAPI_sprofil()
assumes a preinitialized sprofil structure, and initiates profiling based on its values.

.SH ARGUMENTS
.I *buf
-- pointer to profile buffer array.
.LP
.I bufsiz
-- number of entries in *buf.
.LP
.I offset
-- starting value of lowest memory address to profile.
.LP
.I scale
-- scaling factor for bin values.
.LP
.I EventSet 
-- The PAPI EventSet to profile when it is started.
.LP
.I EventCode
-- Code of the Event in the EventSet to profile.
.LP
.I threshold 
-- threshold value for the Event triggers the handler. 
.LP
.I flags 
-- bit pattern to control profiling behavior. Defined values are shown in the table below.

.LP
.I *prof
-- pointer to PAPI_sprofil_t structure.
.LP
.I profcnt
-- number of buffers for hardware profiling (*reserved*)
.LP
.TS
allbox tab($);
cI  s
lB lw.
T{
Defined bits for the flags variable
T}
PAPI_PROFIL_POSIX$T{
Default type of profiling, similar to 
.BR profil (3).
T}
PAPI_PROFIL_RANDOM$T{
Drop a random 25% of the samples.
T}
PAPI_PROFIL_WEIGHTED$T{
Weight the samples by their value.
T}
PAPI_PROFIL_COMPRESS$T{
Ignore samples if hash buckets get big.
T}
PAPI_PROFIL_BUCKET_16$T{
use unsigned short(16bit) as bucket, This is the default bucket.
T}
PAPI_PROFIL_BUCKET_32$T{
use unsigned int(32bit) as bucket.
T}
PAPI_PROFIL_BUCKET_64$T{
use unsigned long(64bit) as bucket.
T}
.TE

.SH RETURN VALUES
On success, this function returns
.B "PAPI_OK."
 On error, a non-zero error code is returned.

.SH ERRORS
.TP
.B "PAPI_EINVAL"
One or more of the arguments is invalid.
.TP
.B "PAPI_ENOMEM"
Insufficient memory to complete the operation.
.TP
.B "PAPI_ENOEVST"
The EventSet specified does not exist.
.TP
.B "PAPI_EISRUN"
The EventSet is currently counting events.
.TP
.B "PAPI_ECNFLCT"
The underlying counter hardware can not count this event and other events
in the EventSet simultaneously.
.TP
.B "PAPI_ENOEVNT"
The PAPI preset is not available on the underlying hardware. 

.SH EXAMPLES
.nf
.if t .ft CW
int retval;
int EventSet = PAPI_NULL;
unsigned long start, end, length;
PAPI_exe_info_t *prginfo;
unsigned short *profbuf;

retval = PAPI_library_init(PAPI_VER_CURRENT);

if (retval != PAPI_VER_CURRENT & retval > 0) {
  fprintf(stderr,"PAPI library version mismatch!\n");
  exit(1); }

if (retval < 0) 
  handle_error(retval);

if ((prginfo = PAPI_get_executable_info()) == NULL)
  handle_error(1);

start = (unsigned long)prginfo->text_start;
end = (unsigned long)prginfo->text_end;
length = (end - start)/sizeof(unsigned short) *sizeof(unsigned short);

profbuf = (unsigned short *)malloc(length);
if (profbuf == NULL)
  handle_error(1);
memset(profbuf,0x00,length);

if ((retval = PAPI_create_eventset(&EventSet)) != PAPI_OK)
  handle_error(retval);

/* Add Total FP Instructions Executed to our EventSet */

if ((retval = PAPI_add_event(EventSet, PAPI_FP_INS)) != PAPI_OK)
  handle_error(retval);

if ((retval = PAPI_profil(profbuf, length, start, 65536, EventSet, 
                PAPI_FP_INS, 1000000, PAPI_PROFIL_POSIX)) != PAPI_OK)
  handle_error(retval);

/* Start counting */

if ((retval = PAPI_start(EventSet)) != PAPI_OK)
  handle_error(1);
.if t .ft P
.fi

.SH AUTHORS
The PAPI Team. See them at the PAPI Web Site: 
http://icl.cs.utk.edu/projects/papi

.SH BUGS
These functions have no known bugs.


.SH SEE ALSO
.BR PAPI_preset "(3), " PAPI_get_executable_info "(3), "
.BR PAPI_set_opt "(3), " PAPI_start "(3), " PAPI_remove_event "(3), " 
.BR PAPI_remove_events "(3), " PAPI_query "(3), "
.BR PAPI_cleanup_eventset "(3), " PAPI_destroy_eventset "(3) " 

