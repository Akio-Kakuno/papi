.\" $Id$
.TH PAPI_add_event 3 "November, 2003" "PAPI Programmer's Reference" "PAPI"

.SH NAME
PAPI_add_event, PAPI_add_events \- add PAPI preset or native hardware event to an event set

.SH SYNOPSIS
.B C Interface
.nf
.B #include <papi.h>
.BI "int\ PAPI_add_event(int " EventSet ", int " EventCode ");"
.BI "int\ PAPI_add_events(int " EventSet ", int *" EventCodes ", int " number ");"
.fi
.B Fortran Interface
.nf
.B #include "fpapi.h"
.BI PAPIF_add_event(C_INT\  EventSet,\  C_INT\  EventCode,\  C_INT\  check )
.BI PAPIF_add_events(C_INT\  EventSet,\  C_INT(*)\  EventCodes,\  C_INT\  number,\  C_INT\  check )
.fi

.SH DESCRIPTION
.nf
.BR "PAPI_add_event() " "adds a hardware event to a PAPI Event Set."
.BR "PAPI_add_events() " "does the same, but for an array of hardware event codes."
.fi

.SH ARGUMENTS
.I EventSet
--  an integer handle for a PAPI Event Set as created by
.BR "PAPI_create_eventset" (3)
.LP
.I EventCode
-- a defined event such as PAPI_TOT_INS.
.LP
.I *EventCode
-- an array of defined events
.LP
.I number
-- an integer indicating the number of events in the array
.I *EventCode
.LP
A hardware event can be either a PAPI preset or a native hardware event code. 
For a list of PAPI preset events, see
.BR "PAPI_presets" "(3) or run the"
.I avail
test case in the PAPI distribution. PAPI presets can be passed to
.BR "PAPI_query_event" "(3) to see if they exist on the underlying architecture."
For a list of native events available on current platform, run
native_avail
test case in the PAPI distribution. For the encoding of native events, see 
.BR "PAPI_event_name_to_code" "(3) to learn how to generate native code for the supported native event on the underlying architecture."

It should be noted that
.BR "PAPI_add_events"
never partially succeeds. It either adds all the events or none at all. This is 
different then the partial success semantics of
.BR "PAPI_remove_events".

.SH RETURN VALUES
On success, these functions return
.B "PAPI_OK."
On error, a non-zero error code is returned.

.SH ERRORS
.TP
.B "PAPI_EINVAL"
One or more of the arguments is invalid.
.TP
.B "PAPI_ENOMEM"
Insufficient memory to complete the operation.
.TP
.B "PAPI_ENOEVST"
The event set specified does not exist.
.TP
.B "PAPI_EISRUN"
The event set is currently counting events.
.TP
.B "PAPI_ECNFLCT"
The underlying counter hardware can not count this event and other events
in the event set simultaneously.
.TP
.B "PAPI_ENOEVNT"
The PAPI preset is not available on the underlying hardware. 

.SH EXAMPLES
.nf
.if t .ft CW
int EventSet = PAPI_NULL;
unsigned int native = 0x0;
	
if (PAPI_create_eventset(&EventSet) != PAPI_OK)
  handle_error(1);

/* Add Total Instructions Executed to our EventSet */

if (PAPI_add_event(EventSet, PAPI_TOT_INS) != PAPI_OK)
  handle_error(1);

/* Add native event (0xc1 on hardware counter 1) */

if (PAPI_event_name_to_code("PM_CYC",&native) != PAPI_OK)
  handle_error(1);

if (PAPI_add_event(EventSet, native) != PAPI_OK)
  handle_error(1);

/* Start counting */

if (PAPI_start(EventSet) != PAPI_OK)
  handle_error(1);
.if t .ft P
.fi

.SH AUTHORS
The PAPI Team. See them at the PAPI Web Site: 
http://icl.cs.utk.edu/projects/papi


.SH BUGS
These functions have no known bugs.

.SH SEE ALSO
.BR PAPI_presets "(3), "
.BR PAPI_set_opt "(3), " PAPI_start "(3), " PAPI_remove_event "(3), " 
.BR PAPI_remove_events "(3), " PAPI_query_event "(3), "
.BR PAPI_cleanup_eventset "(3), " PAPI_destroy_eventset "(3), " PAPI_event_code_to_name "(3)" 
