.\" $Id$
.TH PAPIF 3 "October, 2000" "" "PAPI"

.SH NAME
PAPI \- Performance Application Programming Interface Library

.SH Fortran calling interface
The PAPI library comes with a specific Fortran library interface. The Fortran
interface covers the complete library with a few minor exceptions. The most
important omission is the profiling library utility routines that are not
very relevant in the Fortran version.

The following lists the functions in the Fortran interface. For details about
each function see the corresponding C function. I.e. the functionality of
.B PAPIF_accum
is covered in the 
.B PAPI_accum(3)
man page.

The Fortran calling interface is described below. For most architectures the
following relation holds between the pseudo-types listed and Fortran variable types.

.nf
.BI C_INT\ ->\ INTEGER " Default Integer type"
.BI C_FLOAT\ ->\ REAL " Default Real type"
.BI C_LONG_LONG\ ->\ INTEGER*8 " Extended size integer"
.BI C_STRING\ ->\ CHARACTER*(PAPI_MAX_STR_LEN) " Fortran string"
.BI "C_INT FUNCTION -> EXTERNAL INTEGER FUNCTION" " Fortran function returning integer result"
.fi

A type such as
.B C_INT(*)
denotes an integer array of sufficent size to hold the input/output indicated
either by the accompanying argument or by internal PAPI definitions. For details
on this see the corresponding C routine.

Subroutines accepting 
.B C_STRING 
as an argument on most implementations are capable of reading the character string
size as provided by Fortran. In these implementations the string is truncated or
string padded as necessary. For other implementations the length of the character
array is assumed to be indicated by the corresponding 
.B length
argument. In these cases the string will be a C type string terminated by a 
new-line.

.SH PAPI Low Level Functions
.nf 
.BI PAPIF_accum(C_INT\  EventSet,\  C_LONG_LONG(*)\  values,\  C_INT\  check)
.BI PAPIF_add_event(C_INT\  EventSet,\  C_INT\  Event,\  C_INT\  check)
.BI PAPIF_add_events(C_INT\  EventSet,\  C_INT(*)\  Events,\  C_INT\  number,\  C_INT\  check)
.BI PAPIF_cleanup_eventset(C_INT\  EventSet,\  C_INT\  check)
.BI PAPIF_library_init(C_INT\  check)
.BI PAPIF_thread_init(C_INT\ FUNCTION\  handle,\  C_INT\  flag,\  C_INT\  check)
.BI PAPIF_list_events(C_INT\  EventSet,\  C_INT(*)\  Events,\  C_INT\  number,\  C_INT\  check)
.BI PAPIF_perror(C_INT\  code,\  C_STRING\  destination,\  C_INT\  length,\  C_INT\  check)
.BI PAPIF_query_event(C_INT\  EventCode,\  C_INT\  check)
.BI PAPIF_event_code_to_name(C_INT\  EventCode,\  C_STRING\  out,\  C_INT\  check)
.BI PAPIF_event_name_to_code(C_STRING\  in,\  C_INT\  out,\  C_INT\  check)
.BI PAPIF_read(C_INT\  EventSet,\  C_LONG_LONG(*)\  values,\  C_INT\  check)
.BI PAPIF_rem_event(C_INT\  EventSet,\  C_INT\  Event,\  C_INT\  check)
.BI PAPIF_rem_events(C_INT\  EventSet,\  C_INT(*)\  Events,\  C_INT\  number,\  C_INT\  check)
.BI PAPIF_reset(C_INT\  EventSet,\  C_INT\  check)
.BI PAPIF_set_debug(C_INT\  debug,\  C_INT\  check)
.BI PAPIF_set_domain(C_INT\  domain,\  C_INT\  check)
.BI PAPIF_set_granularity(C_INT\  granularity,\  C_INT\  check)
.BI PAPIF_start(C_INT\  EventSet,\  C_INT\  check)
.BI PAPIF_state(C_INT\  EventSet,\  C_INT\  status,\  C_INT\  check)
.BI PAPIF_stop(C_INT\  EventSet,\  C_LONG_LONG(*)\  values,\  C_INT\  check)
.BI PAPIF_write(C_INT\  EventSet,\  C_LONG_LONG(*)\  values,\  C_INT\  check)
.BI PAPIF_shutdown()
.BI PAPIF_get_hardware_info(C_INT\  ncpu,\
           C_INT\  nnodes,\  C_INT\  totalcpus,\  C_INT\  vendor,\  C_STRING\  vendor_string,\
           C_INT\  model,\  C_STRING\  model_string,\  C_FLOAT\  revision,\  C_FLOAT\  mhz)
.BI PAPIF_create_eventset(C_INT\  EventSet,\  C_INT\  check)
.BI PAPIF_destroy_eventset(C_INT\  EventSet,\  C_INT\  check)
.BI PAPIF_flops(C_FLOAT\  real_time,\  C_FLOAT\  proc_time,\  C_LONG_LONG\  flpins,\  C_FLOAT\  mflops,\  C_INT\  check ) 
.BI PAPIF_get_real_usec(C_LONG_LONG\  time)
.BI PAPIF_get_real_cyc(C_LONG_LONG\  real_cyc)
.BI PAPIF_get_virt_usec(C_LONG_LONG\  time)
.BI PAPIF_get_virt_cyc(C_LONG_LONG\  virt_cyc)

.SH PAPI High Level Functions
.BI PAPIF_num_counters(C_INT\  numevents)
.BI PAPIF_read_counters(C_LONG_LONG(*)\  values,\  C_INT\  array_len,\  C_INT\  check)
.BI PAPIF_start_counters(C_INT(*)\  events,\  C_INT\  array_len,\  C_INT\  check)
.BI PAPIF_stop_counters(C_LONG_LONG(*)\  values,\  C_INT\  array_len,\  C_INT\  check)
.fi
.LP
.SH SEE ALSO
.nf 
.B The PerfAPI Draft: http://icl.cs.utk.edu/projects/papi/api/ 
.B The PerfAPI Draft: 
.B \thttp://icl.cs.utk.edu/projects/papi/api/ 
.fi

.SH DIAGNOSTICS

The return code of the corresponding C routine is returned in the argument 
.B check
in the Fortran interface.

.SH BUGS
.LP
Please contact us if this list is in error or if anything on
any PerfAPI Manpage is in error or unclear.
.LP
The PerfAPI email address is: ptools-perfapi@ptools.org
