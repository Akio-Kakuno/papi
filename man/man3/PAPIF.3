.\" $Id$
.TH PAPIF 3 "October, 2000" "PAPI Programmer's Manual" "PAPI"

.SH NAME
PAPI \- Performance Application Programming Interface Library

.SH SYNOPSIS
.B #include "fpapi.h"

.B call PAPIF_function_name(arg1,arg2,...,check)


.SH Fortran calling interface
The PAPI library comes with a specific Fortran library interface. The
Fortran interface covers the complete library with a few minor
exceptions. The most important omission is the profiling library
utility routines that are not very relevant in the Fortran version.
Functions returning C pointers to structures, such as
.BR PAPI_get_opt() \ and\  PAPI_get_executable_info() ,
are also excluded from the Fortran interface.

The following lists the functions in the Fortran interface. For
details about each function see the corresponding C function. I.e. the
functionality of
.B PAPIF_accum
is covered in the 
.B PAPI_accum(3)
man page.

The Fortran calling interface is described below. For most
architectures the following relation holds between the pseudo-types
listed and Fortran variable types.

.TS
box, tab($);
c  | c  | c
lt | lt | lt.
Pseuodo-type$Fortran type$Description
=
C_INT$INTEGER$Default Integer type
_
C_FLOAT$REAL$Default Real type
_
C_LONG_LONG$INTEGER*8$Extended size integer
_
C_STRING$CHARACTER*(PAPI_MAX_STR_LEN)$Fortran string
_
C_INT FUNCTION$EXTERNAL INTEGER FUNCTION$T{
Fortran function returning integer result 
T}
_
C_INT(*)$T{
Array of corresponding type
T}$T{
C_TYPE(*) refers to an array of the corresponding Fortan type.
The length of the array needed is context dependent. It may be 
e.g. PAPI_MAX_HWCTRS or PAPIF_num_counters.
T}
C_FLOAT(*)$\^$\^
C_LONG_LONG(*)$\^$\^
.TE


Array arguments must be of sufficent size to hold the input/output
from/to the subroutine for predictabe behaviour. The array length is
indicated either by the accompanying argument or by internal PAPI
definitions. For details on this see the corresponding C routine.

Subroutines accepting 
.B C_STRING 
as an argument are on most implementations capable of reading the
character string length as provided by Fortran. In these implementations
the string is truncated or space padded as necessary. For other
implementations the length of the character array is assumed to be
of sufficient size. No character string longer than
.B PAPI_MAX_STR_LEN
is returned by the PAPIF interface. In these cases the string will be
a C type string terminated by a new-line.



.SH PAPI Low Level Functions
.nf 
.BI PAPIF_accum(C_INT\  EventSet,\  C_LONG_LONG(*)\  values,\  C_INT\  check)
.BI PAPIF_add_event(C_INT\  EventSet,\  C_INT\  Event,\  C_INT\  check)
.BI PAPIF_add_events(C_INT\  EventSet,\  C_INT(*)\  Events,\  C_INT\  number,\  C_INT\  check)
.BI PAPIF_cleanup_eventset(C_INT\  EventSet,\  C_INT\  check)
.BI PAPIF_library_init(C_INT\  check)
.BI PAPIF_thread_init(C_INT\ FUNCTION\  handle,\  C_INT\  flag,\  C_INT\  check)
.BI PAPIF_list_events(C_INT\  EventSet,\  C_INT(*)\  Events,\  C_INT\  number,\  C_INT\  check)
.BI PAPIF_perror(C_INT\  code,\  C_STRING\  destination,\  C_INT\  check)
.BI PAPIF_query_event(C_INT\  EventCode,\  C_INT\  check)
.BI PAPIF_describe_event(C_STRING\  EventName,\  C_INT\  EventCode,\  C_STRING\  EventDescr,\  C_INT\  check)
.BI PAPIF_event_code_to_name(C_INT\  EventCode,\  C_STRING\  out,\  C_INT\  check)
.BI PAPIF_event_name_to_code(C_STRING\  in,\  C_INT\  out,\  C_INT\  check)
.BI PAPIF_read(C_INT\  EventSet,\  C_LONG_LONG(*)\  values,\  C_INT\  check)
.BI PAPIF_rem_event(C_INT\  EventSet,\  C_INT\  Event,\  C_INT\  check)
.BI PAPIF_rem_events(C_INT\  EventSet,\  C_INT(*)\  Events,\  C_INT\  number,\  C_INT\  check)
.BI PAPIF_reset(C_INT\  EventSet,\  C_INT\  check)
.BI PAPIF_set_debug(C_INT\  debug,\  C_INT\  check)
.BI PAPIF_set_domain(C_INT\  domain,\  C_INT\  check)
.BI PAPIF_set_granularity(C_INT\  granularity,\  C_INT\  check)
.BI PAPIF_start(C_INT\  EventSet,\  C_INT\  check)
.BI PAPIF_state(C_INT\  EventSet,\  C_INT\  status,\  C_INT\  check)
.BI PAPIF_stop(C_INT\  EventSet,\  C_LONG_LONG(*)\  values,\  C_INT\  check)
.BI PAPIF_write(C_INT\  EventSet,\  C_LONG_LONG(*)\  values,\  C_INT\  check)
.BI PAPIF_shutdown()
.BI PAPIF_get_hardware_info(C_INT\  ncpu,\  C_INT\  nnodes,\ \
           C_INT\  totalcpus,\  C_INT\  vendor,\ \
           C_STRING\  vendor_string, \  C_INT\  model,\ \
           C_STRING\  model_string,\
           C_FLOAT\  revision,\  C_FLOAT\  mhz)
.BI PAPIF_create_eventset(C_INT\  EventSet,\  C_INT\  check)
.BI PAPIF_destroy_eventset(C_INT\  EventSet,\  C_INT\  check)
.BI PAPIF_flops(C_FLOAT\  real_time,\  C_FLOAT\  proc_time,\  C_LONG_LONG\  flpins,\  C_FLOAT\  mflops,\  C_INT\  check ) 
.BI PAPIF_get_real_usec(C_LONG_LONG\  time)
.BI PAPIF_get_real_cyc(C_LONG_LONG\  real_cyc)
.BI PAPIF_get_virt_usec(C_LONG_LONG\  time)
.BI PAPIF_get_virt_cyc(C_LONG_LONG\  virt_cyc)

.SH PAPI High Level Functions
.BI PAPIF_num_counters(C_INT\  numevents)
.BI PAPIF_read_counters(C_LONG_LONG(*)\  values,\  C_INT\  array_len,\  C_INT\  check)
.BI PAPIF_accum_counters(C_LONG_LONG(*)\  values,\  C_INT\  array_len,\  C_INT\  check)
.BI PAPIF_start_counters(C_INT(*)\  events,\  C_INT\  array_len,\  C_INT\  check)
.BI PAPIF_stop_counters(C_LONG_LONG(*)\  values,\  C_INT\  array_len,\  C_INT\  check)
.fi
.LP
.SH SEE ALSO
.nf 
.B The PerfAPI Draft: http://icl.cs.utk.edu/projects/papi/api/ 
.fi

.SH DIAGNOSTICS

The return code of the corresponding C routine is returned in the argument 
.B check
in the Fortran interface.

.SH BUGS
.LP
Please contact us if this list is in error or if anything on
any PerfAPI Manpage is in error or unclear.
.LP
The PerfAPI email address is: ptools-perfapi@ptools.org
