.\" @(#)PAPI_flops    0.10 00/05/18 CHD; from S5
.TH PAPI_flops 3 "October, 2000" "PAPI Programmer's Manual" "PAPI"
.SH NAME
PAPI_flops \- PAPI High level: Simplified call to get Mflops/s, real and processor time
.SH SYNOPSIS
.B #include <papi.h>

.nf
.BI "int PAPI_flops (float *" rtime ", float *" ptime ", long long *" flpins ", float *" mflops ");"
.if

.SH DESCRIPTION
.LP
.B PAPI_flops(\|)
The first call to PAPI_flops will initialize PAPI, setup the counters
to monitor PAPI_FP_INS and PAPI_TOT_CYC events and start the counters.
Subsequent calls will read the counters and return total real time,
total process time, total floating point instructions since the start
of the measurement and Mflops/s rate since latest call to PAPI_flops().
.LP
.I *rtime 
-- total realtime since the first PAPI_flops() call
.LP
.I *ptime 
-- total process time since the first PAPI_flops() call
.LP
.I *flpins 
-- total floating point instructions since the first PAPI_flops() call
.LP
.I *mflops 
-- Mflops/s achieved since the latest PAPI_flops() call
.LP
.SH RETURN VALUES
.TP
.B PAPI_OK
The funtion call was successful. All other return values indicates failure.

.SH NOTES
.LP
Most platforms are only capable of counting the number of floating
point instructions completed which may not translate to floating point
operations to all people. The measured rate is thus rather Mflips/s
and will in most circumstances count FMADD instructions as one
operation.
.LP
.nf
.BR  PAPI_flops() " may be called by:"
.B  \t
.B  \tthe user application program
.fi
.LP
.nf
.B  \t
.BR  PAPI_flops() " contains calls to:"
.B  \t
.B  \tPAPI_perror()
.B  \tPAPI_library_init()
.B  \tPAPI_get_hardware_info()
.B  \tPAPI_create_eventset()
.B  \tPAPI_add_event()
.B  \tPAPI_start()
.B  \tPAPI_get_real_usec()
.B  \tPAPI_accum()
.B  \tPAPI_shutdown()
.fi
.LP
.SH SEE ALSO
.BR PAPI_accum (3),
The PAPI Web Site: 
.B http://icl.cs.utk.edu/projects/papi/

.SH BUGS
.LP
This function has no known bugs.
