2004-06-10  terpstra
	* src/p4_events.c 1.32:
		Static variables in this file were examined for appropriate initialization and usage in threaded and forked situations.
		We have a number of such static and global variables throughout PAPI and the substrates.
		Each will need to be examined for correctness.
		When you're satisfied that a variable is initialized and used appropriately,
		add a comment similar to the following, so we all know it's been checked.
		
		/* **THREAD SAFE STATIC** constant preinitialized structure */

	* src/p3_events.c 1.31:
		Changed name of CPU_CLK_UNHALTED event for Opteron to match
		current documentation.

	* src/linux-memory.c 1.24:
		Added code to compute cache[i].num_lines given cache[i].size
		and cache[i].line_size

2004-06-10  min
	* src/ctests/shlib.c 1.11:
		
		skip the test in AIX if the program can't find the dynamic shared library.

	* src/svr4.c 1.8:
		
		comment out the unreachable code.

	* src/papi.c 1.245:
		
		removed an unused variable in PAPI_list_events function.

	* src/solaris-ultra.c 1.79:
	* src/svr4.c 1.7:
		
		deprecate the shared library support until SUN fixes the bug in dladdr or
		we find a good way to replace dladdr.

2004-06-10  you
	* src/ftests/tenth.F 1.19:
		fix for aix. instead of using do_l1misses_ do_l1misses is used
		on aix, that caused probelm since we only pass int to
		do_l1misses in the C version.

	* src/ftests/fmultiplex2.F 1.17:
		missed this one too. change do_both to fdo_both

	* src/ftests/zero.F 1.14:
		missed this one. change do_flops to fdo_flops.

	* src/ctests/do_loops.c 1.25:
	* src/ftests/accum.F 1.16:
	* src/ftests/description.F 1.12:
	* src/ftests/first.F 1.19:
	* src/ftests/fmultiplex1.F 1.24:
	* src/ftests/highlevel.F 1.13:
	* src/ftests/johnmay2.F 1.13:
	* src/ftests/native.F 1.38:
	* src/ftests/second.F 1.23:
	* src/ftests/tenth.F 1.20:
		in do_llops.c, add 'f' in front of function names of fortran
		wrapers. Since on aix for code is case sensitive, the new
		naming will differentiate C version and Fortran version.

2004-06-09  mucci
	* src/papi.c 1.243:
		Bug fix  for PAPI_list_events. It was not returning the right
		number of events.

	* src/ctests/multiplex1.c 1.41:
	* src/ctests/multiplex1_pthreads.c 1.38:
	* src/ctests/multiplex2.c 1.19:
	* src/ctests/overflow.c 1.50:
	* src/ctests/overflow_pthreads.c 1.27:
	* src/ctests/overflow_single_event.c 1.33:
	* src/ctests/zero.c 1.27:
	* src/ctests/zero_pthreads.c 1.21:
		Fixes for UltraSparc. Lots of code still had #ifdefs which weren't working
		on the USIII.

2004-06-09  min
	* src/ctests/zero_fork.c 1.2:
		
		skip the test in Alpha.

	* src/ctests/realtime.c 1.7:
		
		forgot to update the comment

	* src/ctests/realtime.c 1.6:
		
		change the acceptable error rate from 0.1% to 0.15% so that alpha can
		pass the test.

	* src/papi.c 1.244:
		
		When the platform doesn't support multiple threads to operate the device
		driver, we didn't shutdown gracefully.

	* src/dadd-alpha.c 1.30:
		
		changed the return value for  _papi_hwd_get_real_usec so that this function
		will not overflow.

2004-06-09  you
	* src/ctests/overflow.c 1.51:
	* src/ctests/overflow_pthreads.c 1.28:
	* src/ctests/overflow_single_event.c 1.34:
		recently broken, minor fix to make it work on power3


2004-06-08  mucci
	* multiplex.c 1.46:
	* solaris-memory.c 1.8:
	* solaris-ultra.c 1.77:
	* solaris-ultra.h 1.31:
		More debugging fixes. Unfortunately, I still can't find the error in
		overflow_SINGLE_event or overflow_two_events. We've got a memory leak
		somewhere that's trashing the heap I believe.

	* multiplex.c 1.47:
		This commit fixes the all elusive multiplexing bug. Rick Kufrin has been
		wrestling with this for a while, once he sent me a simple test case, boom,
		fixed.
		
		The problem? STATIC VARIABLES in shared librarys used by applications that
		fork. These variables must always be initialized by the initialization
		routines otherwise they inherit the values of their parents.
		
		The simple fix? tlist = NULL in multiplex_init. Hot damn. Just in time for
		3.0.3.
		
		Rick, I owe you a beer. Heck, I owe myself a beer.
		Stockholm time? 11:20PM

	* papi.c 1.242:
	* papi_internal.c 1.72:
	* papi_internal.h 1.140:
	* perfctr-p3.c 1.42:
	* perfctr-p4.c 1.63:
	* solaris-ultra.c 1.76:
	* tru64-alpha.c 1.49:
		Removed old references to the papi_debug variable, which has long died
		and could cause problems when building with -DDEBUG.
		
		Removed redundant extern int _papi_hwi_debug statements.
		
		Fixed debug code clauses in substrate to be:
		
		if (_papi_hwi_debug & DEBUG_SUBSTRATE)
		
		tested on solaris, perfctr-p3,p4...
		
		Don't know if our tru64 is even valid?

2004-06-08  terpstra
	* linux-memory.c 1.23:
		Commented out static cpuid routine, which is apparently no
		longer called.

	* perfctr-p3.c 1.43:
		A couple fixes for Windows compatibility.

2004-06-08  min
	* solaris-ultra.c 1.75:
		
		deleted the printf statement added by me

	* tru64-alpha.c 1.50:
		
		change the return value of _papi_hwd_get_real_usec so that it will not
		overflow

	* solaris-ultra.c 1.78:
		
		fix the bug caused the segfault in some test programs

2004-06-08  you
	* aix.c 1.38:
		initialize _papi_hwi_system_info.pid in get_system_info
		in _papi_hwd_start, replace
		    if ((retval == 13) && (_papi_hwi_thread_id_fn))
		with
		    if ((retval == 13)
		since in thread case, _papi_hwi_thread_id_fn should not be NULL; otherwise it is NULL and cause problem.

	* aix.c 1.39:
		initialize _papi_hwi_system_info.supports_multiple_threads

	* papi.c 1.241:
	* papi_internal.c 1.71:
		add testing code to eliminate memory leak in library
		initialization.

	* Makefile.aix5-power3-64bit 1.6:
		make it consistent with Makefile.aix5-power3

2004-06-07  mucci
	* linux-ia64.c 1.98:
		Reverted some experimental changes that ended up in the substrate of the IA64.
		This broke libpfm3.
		
		Eventually I want to:
		
		1) Remove the getpid() calls in pfmwrap.h
		2) Remove _papi_hwi_get_thr_context. This is slow and not necessary.
		3) Remove the read() from the interrupt handler. Also slow and not nec.
		
		But I hadn't finished the code to do this yet and it got in by accident.
		Thanks to Min for catching this.

2004-06-07  terpstra
	* linux-ia64.c 1.99:
		Removed reference to unused variable in the pfm 3.0 branch.

	* ctests/realtime.c 1.5:
		Pentium 4 was failing about 15% of the time.
		I corrected it by applying an error bar of 0.1% to both computed microseconds and computed cycles.
		My only explanation is that the MHz value reported by the system has an accuracy no better than this.

2004-06-07  min
	* ctests/branchprofile.c 1.9:
		
		removed this test program

	* extras.c 1.106:
		
		add a type cast in posix_profil to avoid address overflowing

	* solaris-ultra.c 1.74:
		
		set _papi_hwi_system_info.supports_hw_overflow to 0 for UltraSparc 2

	* Rules.pfm 1.8:
		
		added -DITANIUM$(CPU) to FFLAGS, now native.F can pass the test.

	* Makefile.solaris-ultra 1.49:
		
		added -xarch=v8plus option to OPTFLAGS

	* ctests/overflow_twoevents.c 1.15:
		
		considered the case two counters overflow at the same time

	* ctests/Makefile 1.107:
		
		deleted the branchprofile object from the Makefile

	* tru64-alpha.c 1.48:
		
		set _papi_hwi_system_info.supports_hw_overflow to 0

2004-06-05  min
	* Makefile.dadd-alpha 1.12:
	* Makefile.tru64-alpha 1.35:
	* dadd-alpha.c 1.29:
	* dadd-alpha.h 1.9:
	* tru64-alpha.c 1.47:
	* tru64-alpha.h 1.17:
		
		changes made to be compatible with Phil's update

2004-06-04  mucci
	* aix.c 1.37:
	* linux-ia64-memory.c 1.17:
	* linux-ia64.c 1.97:
	* linux-ia64.h 1.36:
	* linux.c 1.28:
	* pfmwrap.h 1.16:
	* power3.h 1.17:
	* power3_events.h 1.7:
	* power4_events.h 1.3:
		More build fixes brought on from the last commit. Mostly just adding
		recursive header file checks and proper include statements.

	* aix.h 1.20:
	* extras.c 1.105:
	* irix-mips.c 1.82:
	* irix-mips.h 1.25:
	* linux-alpha.c 1.13:
	* linux-alpha.h 1.4:
	* linux-ia64.c 1.96:
	* solaris-ultra.c 1.73:
	* solaris-ultra.h 1.30:
	* svr4.c 1.5:
	* tru64-alpha.c 1.46:
	* tru64-alpha.h 1.16:
	* unicos-ev5.c 1.43:
		More build fixes...please make sure your header files have
		#ifndef _HEADER_H
		#define _HEADER_H
		...
		#endif
		
		All PAPI.c files shoul dhave this clause at the head.
		
		nclude "papi.h"
		#include SUBSTRATE
		#include "papi_preset.h"
		#include "papi_internal.h"
		#include "papi_protos.h"

	* ctests/clockcore.c 1.13:
	* ctests/realtime.c 1.4:
		Added standard use of NUM_ITERS in clockcore, fixed typing in tests
		in realtime.

	* aix.h 1.19:
	* any-null.c 1.32:
	* any-proc-null.c 1.3:
	* extras.c 1.104:
	* irix-mips.c 1.81:
	* irix-mips.h 1.24:
	* linux-alpha.c 1.12:
	* linux-ia64.c 1.95:
	* linux.c 1.27:
	* papi.c 1.240:
	* papi_hl.c 1.65:
	* papi_internal.c 1.70:
	* papi_internal.h 1.139:
	* papi_protos.h 1.36:
	* perfctr-p3.c 1.41:
	* perfctr-p3.h 1.29:
	* perfctr-p4.c 1.62:
	* perfctr-p4.h 1.32:
	* solaris-ultra.c 1.72:
	* solaris-ultra.h 1.28:
	* tru64-alpha.c 1.45:
	* unicos-ev5.c 1.42:
	* unicos-ev5.h 1.12:
	* x1.c 1.4:
	* x1.h 1.3:
		This commit makes all timers long_long, and fixes a few places where we
		were using u_long_long and shouldn't have. Please test your platforms.
		Specifically run ctests/realtime and ctests/clockres before and after the
		update.
		
		Also, moved the inline definitions to the substrate header files.
		
		Added a few _PAPI_<HEADER>_H defs to the beginning of a few files. This
		should be the last major change for the 3.0 release.
		
		Also deleted the num_runners code for multiple running eventsets. That's gone too.

	* Makefile.aix-power3 1.8:
	* Makefile.aix-power4 1.15:
	* Makefile.aix-power4-64bit 1.10:
	* Makefile.aix5-power3 1.16:
	* Makefile.aix5-power3-64bit 1.5:
	* Makefile.irix-mips 1.44:
	* Makefile.solaris-ultra 1.47:
	* Makefile.solaris-ultra-64bit 1.2:
	* solaris-ultra.h 1.29:
		svr4 target missing from numerous 64 bit target files.  (min?)
		inappropriate flags set for svr4, we should always build libpapi.a/so files
		with LIBCFLAGS and OPTFLAGS...please!
		
		Added ifdef to solaris-ultra.h and removed bad includes.

2004-06-04  min
	* irix-mips.h 1.26:
		
		changed #define inline_static to static instead of __inline

	* Makefile.solaris-ultra 1.48:
	* Makefile.solaris-ultra-64bit 1.3:
		
		deleted duplicated compile option for svr4.c, added -ldl to LDFLAG

	* Rules.pfm 1.7:
		
		Deleted -g option

	* Makefile.irix-mips 1.46:
		
		forgot to delete -DDEBUG option

	* svr4.c 1.6:
		added some headfiles

	* Makefile.irix-mips 1.45:
	* Makefile.irix-mips-64bit 1.13:
		
		deleted duplicated compile option for svr4.c and added svr4.c to
		Makefile.irix-mips-64bit

2004-06-04  you
	* power4_events.h 1.4:
		add SUBSTRATE header

2004-06-04  terpstra
	* papivi.h 1.3:
		Modifications in the version independent layer for
		compatibility with the new memory structure

2004-06-03  min
	* ctests/shlib.c 1.10:
		
		change libm.a to libpapi.so in AIX to test our own shared library

	* ctests/Makefile 1.106:
		Deleted a useless include path

	* Makefile.dadd-alpha 1.11:
	* Makefile.tru64-alpha 1.34:
		
		delete -DHAS_NATIVE_MAP option

	* dadd-alpha.c 1.28:
	* tru64-alpha.c 1.44:
		
		changed DBG to SUBDBG

	* papi.c 1.239:
		
		revise the function PAPI_get_overflow_event_index based on Phil's
		suggestion. Tested in Itanium.

	* libpapi.exp 1.1:
		
		Add this file to help to generate the shared library in AIX,
		the shared library tested with dlopen, fortran program and c program,
		works fine.

	* Makefile.aix5-power3 1.15:
	* aix.c 1.35:
	* aix.h 1.17:
		
		implemented _papi_hwd_update_shlib_info in AIX5
		added -DNO_FUNCTION_MACRO and necessary options to generate shared library;
		add some headfiles in aix.h
		
		Tested in power3 with aix5.1

	* aix.c 1.36:
	* aix.h 1.18:
		
		Minor change to pass the compile in AIX4.3

2004-06-02  mucci
	* Makefile.linux-pfm-itanium [papi-2-3-4] 1.2.4.9.2.3:
	* Makefile.linux-pfm-itanium2 [papi-2-3-4] 1.6.4.3.2.1:
		Back port of changes to 3.0

	* perfctr-p3.h 1.28:
	* perfctr-p4.h 1.31:
		Got it. I needed __USE_GNU as well as _GNU_SOURCE in this
		strange case.

	* Makefile.linux-alpha 1.4:
	* Rules.perfctr 1.9:
	* Rules.pfm 1.5:
	* extras.c 1.103:
	* linux-memory.c 1.22:
	* papi.c 1.238:
	* papi_protos.h 1.35:
		Added -D__USE_GNU flag to get ffsll intrinsic prototype
		Added HAVE_FFSLL flag and ffsll inline def to papi_protos.h.
		Restructured and optimized PAPI_get_overflow_index function, it's almost
		there. Min's going to fix the rest I hope. ;-)
		
		Moved papi_hwi_ffsll out of extras.c, that function could use some optimization
		as well.

	* Makefile.linux-alpha 1.5:
	* Rules.perfctr 1.10:
	* Rules.pfm 1.6:
	* perfctr-p3.h 1.27:
	* perfctr-p4.h 1.30:
		Better implementation of the ffsll GNu source handling function.
		
		We should work to remove the includes from papi.h as putting _GNU_SOURCE
		elsewhere doesn't work. #define _GNU_SOURCE really should be in the substrate
		header file, but that doesn't work since we include files in papi.h. Argh.

	* linux-ia64.c [papi-2-3-4] 1.38.2.1.2.11.2.2:
		Signal changes as requested by Rick Kufrin.

2004-06-02  terpstra
	* papi_internal.h 1.138:
		Looks like irix needs the same __inline definition as AIX.

	* irix-mips.c 1.80:
		Changed a call to get_memory_info() into a call to
		_papi_get_memory_info() for better consistency.

	* Makefile.linux-perfctr-p4 1.31:
		Added -DPENTIUM4 back to TOPTFLAGS

	* ctests/test_utils.c 1.47:
		Removed a trap for PENTIUM4 leftover from earlier development.

	* ctests/native.c 1.43:
		Recoded to eliminate need for PENTIUM4 define.

	* aix-memory.c 1.11:
	* irix-memory.c 1.15:
	* linux-ia64-memory.c 1.16:
		Changes for new static memory descriptors.
		Forgot to set the value in the mem_hierarchy.levels field.

2004-06-02  min
	* irix-mips.h 1.23:
	* svr4.c 1.4:
		
		fixed two compile warning.

	* extras.c 1.102:
		
		oops, forgot to check in this file.

2004-06-02  you
	* Makefile.aix-power3 1.7:
	* Makefile.aix5-power3 1.14:
		make power's Makefile consistent

2004-06-01  mucci
	* GNUMakefile.inc 1.1:
	* Makefile.irix-mips 1.43:
	* Makefile.irix-mips-64bit 1.12:
		Added -c99 flag to MIPSpro compiler line to support inline keyword.
		
		Added beginnings of a full VPATH compatible GNU Make include driver.

	* Makefile 1.6:
		Updated the list of valid Makefiles.

	* Makefile.linux-ia64-itanium2-libpfm3.0 1.4:
	* Makefile.linux-ia64-libpfm3.0 1.6:
	* Makefile.linux-pfm-itanium 1.19:
	* Makefile.linux-pfm-itanium2 1.13:
	* Rules.pfm 1.4:
		Minor fixes, deprecated old makefiles

	* perfctr-2.6.x/CHANGES 1.1.1.4:
	* perfctr-2.6.x/TODO 1.1.1.2:
	* perfctr-2.6.x/etc/costs/Athlon-1.66 1.1.1.1:
	* perfctr-2.6.x/linux/drivers/perfctr/RELEASE-NOTES 1.1.1.4:
	* perfctr-2.6.x/linux/drivers/perfctr/ppc.c 1.1.1.2:
	* perfctr-2.6.x/linux/drivers/perfctr/version.h 1.1.1.4:
	* perfctr-2.6.x/linux/drivers/perfctr/x86.c 1.1.1.4:
	* perfctr-2.6.x/linux/drivers/perfctr/x86_64.c 1.1.1.4:
	* perfctr-2.6.x/linux/drivers/perfctr/x86_setup.c 1.1.1.3:
	* perfctr-2.6.x/linux/drivers/perfctr/x86_tests.h 1.1.1.3:
	* perfctr-2.6.x/patches/patch-kernel-2.4.21-15.EL-redhat 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.4.21-193-suse 1.1.1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.27-pre3 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.6.5-1.358-redhat 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.6.6 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.6.7-rc1 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.6.7-rc1-mm1 1.1.1.1:
	* perfctr-2.6.x/perfctr.spec 1.1.1.4:
	* perfctr-2.6.x/usr.lib/Makefile 1.1.1.4:
	* perfctr-2.6.x/usr.lib/ppc.c 1.1.1.2:
		Import of perfctr 2.6.8

	* Makefile.linux-pfm-itanium 1.18:
	* Makefile.linux-pfm-itanium2 1.12:
	* Rules.pfm 1.3:
		Fully updated Rules file to conform with Rules.perfctr. It works identically
		now as well as autodetects the kernel version and version of PFM.
		
		These files will be renamed to Rules.libpfm amd Makefile.linux-libpfm-itanium
		Makefile.linux-libpfm-itanium2

	* Rules.perfctr 1.8:
		Added native_clobber target which is not used yet. All new nmakefiles
		should have this target. Better cleanup and install rules. Rules.perfctr and
		Rules.libpfm look almost the same1

	* perfctr-2.6.x/usr.lib/Makefile 1.5:
		I don't know why this file always has conflicts on import. ARGH!

	* perfctr-2.4.x/CHANGES 1.1.1.2:
	* perfctr-2.4.x/linux/drivers/perfctr/RELEASE-NOTES 1.1.1.2:
	* perfctr-2.4.x/linux/drivers/perfctr/version.h 1.1.1.2:
	* perfctr-2.4.x/linux/drivers/perfctr/x86_setup.c 1.1.1.2:
	* perfctr-2.4.x/linux/include/asm-i386/perfctr.h 1.1.1.2:
	* perfctr-2.4.x/patches/patch-kernel-2.4.21 1.1.1.2:
	* perfctr-2.4.x/patches/patch-kernel-2.4.21-15.EL-redhat 1.1.1.1:
	* perfctr-2.4.x/patches/patch-kernel-2.4.22 1.1.1.2:
		Import of perfctr 2.4.9pl2

	* Makefile.linux-pfm-itanium 1.20:
	* Makefile.linux-pfm-itanium2 1.14:
		Rename for Rules.pfm

2004-06-01  min
	* papi.c 1.237:
	* papi.h 1.113:
	* papi_protos.h 1.34:
		
		add a new function PAPI_get_overflow_event_index

	* irix-memory.c 1.14:
		
		change the macro value for TLB entry size

	* ctests/mem_info.c 1.9:
	* ctests/memory.c 1.15:
		
		add type cast to avoid compile warning information

2004-06-01  terpstra
	* ctests/mem_info.c 1.8:
	* ctests/memory.c 1.14:
		Changes for new static memory descriptors.
		Oops.
		I forgot to committhese changes when I committed the new papi.h.

	* aix-memory.c 1.10:
	* irix-memory.c 1.13:
	* linux-ia64-memory.c 1.15:
		Changes for new static memory descriptors.
		Preliminary ports for POWER, Irix, and Itanium.
		Successful compiles on POWER and Itanium.
		No verification of results.
		No attempt to compile on Irix.
		Please test and contact me with any questions.

2004-05-31  terpstra
	* linux-memory.c 1.21:
	* papi.h 1.112:
	* papi_data.c 1.16:
		Changes for new static memory descriptors.
		Implemented on Pentium III, 4, Athlon.
		Tested on Pentium 4.
		Porting to other platforms underway.

2004-05-31  mucci
	* linux-ia64.c 1.94:
		Added SA_RESTART to overflow signal handler flags.
		
		Removed broken check for a sigprof handler (old code from me)

2004-05-28  mucci
	* Rules.pfm 1.2:
		Minor fix for installation of libpfm header files. They live in
		perfmon/

	* papi.h 1.111:
		Bumped minor version number.

2004-05-26  mucci
	* Makefile.linux-perfctr-opteron 1.14:
		-march=athlon-mp is the wrong instruction set for the k8.
		-march=k8 is the right one. gcc3 only.

2004-05-26  jthomas
	* p3_events.c 1.29:
		Fixed a few typos and errors I spotted.

	* p3_events.c 1.30:
		The new/modified events in the Pentium M eventset changed the unit
		mask a hair and wasn't clear enough for success in the first round
		of updates.

2004-05-25  min
	* papi.c 1.236:
	* papi_data.c 1.15:
	* papi_internal.h 1.137:
		
		add an MDI variable supports_multiple_threads and delete the
		ifdef for ALPHA/OSF  in papi.c

	* tru64-alpha.c 1.43:
		
		add an MDI variable supports_multiple_threads

2004-05-25  jthomas
	* p3_events.c 1.28:
	* perfctr-p3.c 1.40:
		Added pentium M support to the event table and gave the p3 substrate the
		ability to handle the new tables.  I haven't tested on a pentium M (I
		don't have access to one).  Haihang?

2004-05-25  terpstra
	* ctests/realtime.c 1.3:
		To further clarify the clock rate, I added a computed MHz report, based on the data we collect.
		For Pentium 4 (torc17) the clock precision between measurements is about 2 ppm,
		but the accuracy wrt reported MHz is about 200 ppm low.

2004-05-24  min
	* extras.c 1.101:
	* linux-ia64.c 1.93:
		shift overflow_vector in the substrate rather than in extras.c

2004-05-24  terpstra
	* ctests/realtime.c 1.2:
		Pentium 4 cycles (on torc17) are consistently low by about 4 parts per 10000.
		I added an error tolerance to the cycles test of 1 part per 1000 to accomodate this.

2004-05-24  jthomas
	* perfctr-p3.c 1.39:
	* perfctr-p4.c 1.61:
		Added a SA_RESTART flag to the sigaction's flags in _papi_hwd_set_overflow()
		based on Bradley Broom's recommendation.

2004-05-21  terpstra
	* papi_internal.h 1.136:
		Modified inlining define to properly support AIX.

2004-05-21  mucci
	* Makefile.linux-perfctr-opteron 1.13:
	* Rules.perfctr 1.7:
		Opteron install fix from Bryan O'Sullivan along with better make macros
		in Rules.perfctr

2004-05-20  terpstra
	* extras.c 1.98:
		Refactored profiling code to eliminate redundancies between 16, 32, and 64 bit versions.
		Created two inline subroutines to compute size dependent array index and increment values.
		Eliminated subroutine call to size dependent profiling routine.
		This should be easier to maintain, and (hopefully) easier to debug.

	* papi_internal.h 1.135:
	* perfctr-p3.h 1.26:
		Remove #define for inline_static from the P3 substrate and promote it to papi_internal.h
		This #def is now needed in extras.c, so it has to be available above the substrate level.
		My bad for only testing on one platform.

	* perfctr-p4.h 1.29:
		Remove #define for inline_static from the P4 substrate and promote it to papi_internal.h
		This #def is now needed in extras.c, so it has to be available above the substrate level.
		My bad for only testing on one platform.

	* p4_events.c 1.31:
		Deprecate PAPI_RES_STL until we can figure out a definition
		that properly counts resource stalls.

	* extras.c 1.99:
		Ooops.
		That last commit left in a bunch of dead commented code.
		This version is also more completely commented.

2004-05-20  min
	* extras.c 1.100:
		
		optimize _papi_hwi_dispatch_overflow_signal for Itanium

2004-05-19  you
	* power4.c 1.24:
		use PM_DATA_FROM_L3 for L2 cache miss on power4

2004-05-17  mucci
	* ctests/profile_twoevents.c 1.10:
		Much better test case for profile_twoevents.c

	* ctests/overflow_twoevents.c 1.14:
	* ctests/test_utils.h 1.28:
		Added better test case for overflow_twoevents.
		
		Stores multiple overflow masks.
		
		Bumped NUM_ITERS *10 to add higher interrupt counts.
		
		This test case should now fail as reported by N Tallent.

2004-05-17  min
	* ctests/earprofile.c 1.14:
	* ctests/shlib.c 1.9:
		
		updated the comments

	* dadd-alpha.c 1.27:
	* extras.c 1.97:
	* linux-ia64.c 1.92:
		
		fix the profile_twoevnets bug in Itanium reported by Nathan Tallent

2004-05-14  min
	* Makefile.irix-mips 1.42:
	* irix-mips.c 1.79:
	* svr4.c 1.3:
		
		implemented _papi_hwd_update_shlib_info function in IRIX,
		the result was verified by dbx.

2004-05-14  jthomas
	* perfctr-p4.c 1.60:
		PERFCTR_X86_INTEL_P4M3 was not defined in perfctr-2.4.x, so I
		#ifdef'ed its usage in setup_presets().

2004-05-13  min
	* extras.c 1.96:
		
		fix the bug reported by broom@rice.edu
		bug: s_profile maps all hits onto first section of
		    large profiling region

2004-05-13  terpstra
	* ctests/do_loops.c 1.24:
	* ctests/dummy.c 1.7:
		Add stub routines to support all four namespace variations as
		found in papi_fwrappers and the perfometer api.

	* perfctr-p3.c 1.38:
		Added support for Pentium M to two more switch statements.

	* win2k/substrate/WinPAPI.def 1.10:
		Remove DESCRIPTION line (not supported in VS.NET);
		Deprecate dmem_info ref, since it's been deprecated in papi.c

	* win2k/shell/WinPAPIShell.c 1.13:
		Typecast some parameters so VS.NET won't flag warnings about
		them.

	* win2k/winpmc/instpmcfre.bat 1.2:
		Update directory tree for latest install of ddkbuild

	* win2k/ftests/faccum.dsp 1.6:
	* win2k/ftests/fdescription.dsp 1.6:
	* win2k/ftests/ffirst.dsp 1.6:
	* win2k/ftests/fflops.dsp 1.6:
	* win2k/ftests/fhighlevel.dsp 1.6:
	* win2k/ftests/fjohnmay2.dsp 1.6:
	* win2k/ftests/fmatrixlowpapi.dsp 1.6:
	* win2k/ftests/fmatrixpapi.dsp 1.6:
	* win2k/ftests/fmatrixpapi2.dsp 1.6:
	* win2k/ftests/fsecond.dsp 1.6:
	* win2k/ftests/ftenth.dsp 1.6:
	* win2k/ftests/fzero.dsp 1.6:
		Rework Fortran project files to support replacement of dummy.F
		and do_loops.F with equivalent C functionality.

	* perfctr-p3.h 1.25:
		Added additional cpu types from perfctr into Windows branch.

	* linux.c 1.26:
		Added support for Pentium M to Windows branch.

2004-05-11  jthomas
	* p3_events.c 1.27:
		The duplicate preset event was actually an 8 month old typo with the
		incorrect preset label.  L1 store misses was mislabeled as a duplicate
		L1 load misses.

2004-05-11  min
	* irix-mips.c 1.78:
		
		fix a compile error(not introduced by me)

2004-05-11  terpstra
	* p3_events.c 1.26:
		Removed duplicate definitions of PAPI_L1_LDM event.

	* win2k/help/papi_matlab.html 1.7:
		Minor updates for PAPI 3 release.

2004-05-11  mucci
	* papi_internal.h 1.134:
		Wow. This was an ugly bug. The return was in the wrong place for the
		error_return macros. The result? If we didn't have internal debugging
		set, the code would never return.
		
		Look very closely at this diff. Notice the change?
		
		< #define error_return(retval, format, args...){ if (_papi_hwi_error_level!=PAPI_QUIET) { fprintf(stderr, "Error %s:%s:%d: ", __FILE__,__func__,__LINE__); fprintf(stderr, format, ## args); fprintf(stderr, "\n"); return(retval); } }
		---
		> #define error_return(retval, format, args...){ if (_papi_hwi_error_level!=PAPI_QUIET) { fprintf(stderr, "Error %s:%s:%d: ", __FILE__,__func__,__LINE__); fprintf(stderr, format, ## args); fprintf(stderr, "\n"); } return(retval); }
		32c32
		< #define error_return(retval, format){ if (_papi_hwi_error_level!=PAPI_QUIET) { fprintf(stderr, "Error %s:%s:%d: ", __FILE__,__func__,__LINE__); fprintf(stderr, format); fprintf(stderr, "\n"); return(retval); } }
		---
		> #define error_return(retval, format){ if (_papi_hwi_error_level!=PAPI_QUIET) { fprintf(stderr, "Error %s:%s:%d: ", __FILE__,__func__,__LINE__); fprintf(stderr, format); fprintf(stderr, "\n"); } return(retval); }
		[mucci@torc0 src]$

2004-05-10  mucci
	* ctests/dmem_info.c 1.4:
	* ctests/vector.c 1.1:
		Now skipped test case according to temporary deprecation of dmem info.
		
		Added the basics for an SSE/SSE2 test case. This will require a bit more
		work. Currently it has no papi in it, just the SSE/SSE2 loops. Take a look
		at the assembly.
		
		This test case will have to work (and produce correct numbers) for PAPI 3.0
		final. We need to find out what is included in FP_INS and what is included
		in VEC_INS.
		
		I'm leaning towards only counting Vector Packed floating point INS
		in VEC_INS for the 3.0 final release.

	* papi.c 1.235:
	* papi.h 1.110:
		Added sample structure definitions for memory heir. defs and for
		PAPI_event_info_t as suggested by Dan. These are guarded by
		
		#defines
		
		NEW_PAPI_EVENT_INFO
		NEW_PAPI_MEM_INFO
		
		Please have a look at the structures.

2004-05-07  mucci
	* Makefile.linux-perfctr-athlon 1.8:
	* Makefile.linux-perfctr-opteron 1.12:
	* Makefile.linux-perfctr-p3 1.20:
	* Makefile.linux-perfctr-p4 1.30:
	* Rules.perfctr 1.6:
		These changes may be lost due to impending commits.
		
		Additional changes to put back in the flags that were deleted.
		
		Note this Rule in Rules.perfctr that detects the OLD GCC.
		
		Each of the 4 linux-perfctr substrates now has a GCC3ARGS flag.
		
		I should have done this ages ago. This allows the builds to proceed on
		all our old systems with gcc 2.96.
		
		Tested: torc0, torc13, torc14, torc17.
		
		GCCVER3         = $(shell gcc -v 2>&1 | grep version | cut -f3 -d" " | grep "^3")
		ifeq (,$(GCCVER3))
		OPTFLAGS        += -O3
		# -O -g -DDEBUG
		else
		OPTFLAGS        += $(GCC3ARGS) -O3
		# -O -g -DDEBUG
		endif

2004-05-06  mucci
	* Makefile.linux-perfctr-athlon 1.7:
	* Makefile.linux-perfctr-opteron 1.11:
	* Makefile.linux-perfctr-p3 1.19:
	* Makefile.linux-perfctr-p4 1.29:
	* Rules.perfctr 1.4:
		Hi,
		
		This is an iterative update to the Makefiles on the linux platform. Joe
		correctly pointed out (along with John Mudd of Portland Group) that the
		Opteron really wants -fPIC on the shared build line.
		
		Also, I have finally figured out why we needed the 'ln' phase of the
		perfctr build and it has been removed. The reason? We were building linux.c
		before the Perfctr library, which did the link for us. A simple reordering
		of the MISCOBJS in Rules.perfctr did the trick.
		
		Also, why did I not catch this with a clean cvs co? I figured that out as
		well. We were using make clean to perfctr, which did not remove the link.
		I have changed the clean target (in native_clean) to make distclean, which
		properly removes the link and now makes a 'make clobber' functionally identical
		to a cold checkout.
		
		These makefile changes may be soon deprecated in favor of new stuff by
		Kevin and Haihang.

	* Rules.perfctr 1.5:
		If we are building from a preinstalled PerfCtr (via PERFCTR_PREFIX=<> on
		the make line) then we do not want to run install in the perfctr directory.
		That would overwrite the installed perfctr. Yikes.
		
		Also, the rule for doing old-style perfctr install (with PerfCtr 2.4.x)
		needed to be changed slightly to take into account perfctr-2.7.0.
		
		It now looks like this:
		
		
		ifeq (,${PERFCTR_PREFIX})
		ifeq (${VERSION},2.4.x)
		native_install:
			-cp -p $(PERFCTR)/usr.lib/libperfctr.so $(PREFIX)/lib
			-cp -p $(PERFCTR)/usr.lib/event_codes.h $(PREFIX)/include
			-cp -p $(PERFCTR)/usr.lib/libperfctr.h  $(PREFIX)/include
		else
		native_install:
			-$(MAKE) -C $(PERFCTR) PREFIX=$(PREFIX) install
		endif
		else
		native_install:
		endif

2004-05-05  jthomas
	* Makefile.linux-perfctr-athlon 1.6:
	* Makefile.linux-perfctr-opteron 1.10:
	* Makefile.linux-perfctr-p3 1.18:
	* Makefile.linux-perfctr-p4 1.28:
	* Rules.perfctr 1.3:
		Bug fixes in response to Phil's recent changes.  -fPIC appears to
		be necessary for the opteron to work and until I know otherwise,
		-fPIC needs to remain.
		
		Also removed some code from Rules.perfctr regarding the ARCH variable;
		it works regardless of the perfctr version, so I removed it from being
		version dependent.

2004-05-05  min
	* Makefile.irix-mips-64bit 1.11:
		
		add -DNO_VARARG_MACRO to cflag

2004-05-04  jthomas
	* Rules.perfctr 1.2:
		In the case of a clean checkout, perfctr soft link for some
		reason does not create itself, so our Makefile did the dirty
		work.  For some reason, this code was removed and not tested
		afterwards, unless I am misunderstanding something about the
		new make method.

2004-05-04  terpstra
	* win2k/winpmc/DdkBuild/DdkBuild.htm 1.2:
		Documentation no longer relevant. Go to the web for the latest.

	* win2k/winpmc/DdkBuild/ddkbuild.bat 1.2:
		Latest batch file for building kernel drivers from within
		Visual Studio.

	* win2k/winpmc/winpmc.html 1.2:
		Updated documentation for Visual Studio.NET and for the latest
		ddkbuild.bat file.

2004-05-04  mucci
	* perfctr-2.6.x/CHANGES 1.1.1.3:
	* perfctr-2.6.x/INSTALL 1.1.1.2:
	* perfctr-2.6.x/examples/signal/x86.c 1.1.1.3:
	* perfctr-2.6.x/linux/drivers/perfctr/Makefile 1.1.1.2:
	* perfctr-2.6.x/linux/drivers/perfctr/Makefile24 1.1.1.2:
	* perfctr-2.6.x/linux/drivers/perfctr/RELEASE-NOTES 1.1.1.3:
	* perfctr-2.6.x/linux/drivers/perfctr/compat.h 1.1.1.2:
	* perfctr-2.6.x/linux/drivers/perfctr/version.h 1.1.1.3:
	* perfctr-2.6.x/linux/drivers/perfctr/x86.c 1.1.1.3:
	* perfctr-2.6.x/linux/drivers/perfctr/x86_64.c 1.1.1.3:
	* perfctr-2.6.x/linux/drivers/perfctr/x86_compat.h 1.1.1.2:
	* perfctr-2.6.x/linux/drivers/perfctr/x86_setup.c 1.1.1.2:
	* perfctr-2.6.x/linux/drivers/perfctr/x86_tests.c 1.1.1.3:
	* perfctr-2.6.x/linux/drivers/perfctr/x86_tests.h 1.1.1.2:
	* perfctr-2.6.x/patches/aliases 1.1.1.3:
	* perfctr-2.6.x/patches/patch-kernel-2.4.16 1.1.1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.17 1.1.1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.18 1.1.1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.18-14-redhat 1.1.1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.18-17.8.0-redhat 1.1.1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.18-27.8.0-redhat 1.1.1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.18-3-redhat 1.1.1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.19 1.1.1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.19.SuSE-206 1.1.1.3:
	* perfctr-2.6.x/patches/patch-kernel-2.4.20 1.1.1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.20-19.8-redhat 1.1.1.3:
	* perfctr-2.6.x/patches/patch-kernel-2.4.20-19.9-redhat 1.1.1.3:
	* perfctr-2.6.x/patches/patch-kernel-2.4.20-8-redhat 1.1.1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.20-9.2-redhat 1.1.1.3:
	* perfctr-2.6.x/patches/patch-kernel-2.4.22-1.2179.nptl-redhat 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.4.26 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.4.27-pre1 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.6.4 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.6.5 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.6.6-rc3 1.1.1.1:
	* perfctr-2.6.x/perfctr.spec 1.1.1.3:
	* perfctr-2.6.x/usr.lib/Makefile 1.1.1.3:
	* perfctr-2.6.x/usr.lib/event_set_p6.c 1.1.1.3:
		Imported version 2.6.7

	* perfctr-2.6.x/usr.lib/Makefile 1.3:
		Somehow this got locally modified.

	* perfctr-2.6.x/usr.lib/Makefile 1.4:
		Restored deleted file

2004-05-03  mucci
	* Makefile.inc 1.93:
	* Makefile.linux-perfctr-athlon 1.5:
	* Makefile.linux-perfctr-opteron 1.9:
	* Makefile.linux-perfctr-p3 1.17:
	* Makefile.linux-perfctr-p4 1.27:
	* Rules.perfctr 1.1:
	* Rules.perfctr-2.4.x 1.5:
	* Rules.perfctr-2.6.x 1.6:
	* perfctr-p3.c 1.37:
		Ok, now we have one Rules.perfctr that works for all versions of PerfCtr.
		
		If you have already installed perfctr via a make install:
		
		make -f <file> PERFCTR_PREFIX=<prefix>
		
		If you have an external but uninstalled perfctr tree:
		
		make -f <file> PERFCTR=<directory>
		
		If you really want PerfCtr 2.4:
		
		Add VERSION=2.4.x to the above.
		
		Note how simply all the Makefiles are now. 4 lines each!
		
		Also added the beginnings of VPATH corrections. This was all inspired
		by Bryan Osullivan's patch that's been collecting dust in my mailbox. Thanks
		Bryan!
		
		My intention is to have full VPATH support in 3.0 final.
		
		Added column width of 132 to the g77 build just in case.

2004-05-01  jthomas
	* ctests/test_utils.h 1.27:
		The high number of NUM_READS was causing the pentium 3 to
		fail on profiling tests.  Reduced it to 20000 instead of 2000000.
		*This was only a problem on the pentium3*

2004-04-30  mucci
	* p3_events.c 1.25:
	* p4_events.c 1.30:
	* papi.h 1.109:
	* perfctr-p3.c 1.36:
	* perfctr-p4.c 1.59:
		Removed trailing period from native event definitions.
		Added comment to PAPI_event_info_t field in papi.h
		
		Added Pentium M to the right place. P3 not P4

	* ctests/Makefile 1.105:
	* ctests/avail.c 1.24:
	* ctests/native_avail.c 1.15:
	* ctests/realtime.c 1.1:
		Added realtime test case. My laptop religiously fails this test. I don't
		know if it's speedstep or what. But it passes on normal systems.
		
		Also, added real output for all PAPI_event_info_t fields for avail.c and
		native_avail.c. You can now see the erroneous fields in the native events.

2004-04-29  mucci
	* aix.c 1.34:
	* any-null.c 1.31:
	* ctests/all_events.c 1.10:
	* ctests/avail.c 1.23:
	* ctests/derived.c 1.16:
	* ctests/multiplex2.c 1.18:
	* ctests/multiplex3_pthreads.c 1.24:
	* ctests/native_avail.c 1.14:
	* dadd-alpha.c 1.26:
	* examples/multiplex.c 1.2:
	* extras.c 1.95:
	* genpapifdef.c 1.22:
	* irix-mips.c 1.77:
	* linux-alpha.c 1.11:
	* linux-ia64.c 1.91:
	* p3_events.c 1.24:
	* p4_events.c 1.29:
	* papi.c 1.234:
	* papi.h 1.108:
	* papiStdEventDefs.h 1.30:
	* papi_internal.c 1.69:
	* papi_preset.c 1.13:
	* papivi.h 1.2:
	* perfctr-p3.c 1.35:
	* perfctr-p4.c 1.58:
	* pfmwrap.h 1.15:
	* power3.c 1.30:
	* power4.c 1.23:
	* solaris-ultra.c 1.71:
	* tru64-alpha.c 1.42:
	* unicos-ev5.c 1.41:
	* x1-native.h 1.3:
		A big commit. This patch changes the old NATIVE_MASK and PRESET_MASK
		to PAPI_NATIVE_MASK and PAPI_PRESET_MASK etc... Unfortunately,
		these were used everywhere.
		
		Also, added PAPI_PRESET_ENUM_AVAIL to PAPI_enum_event to only enumerate
		available presets.
		
		This MAY have broken other platforms. But I think I got everything.

2004-04-28  mucci
	* papi_preset.c 1.12:
		This fixes a bug in the filling in of the vendor fields. It showed up
		when you forked a code that used the shared library and each called
		PAPI_get_event_info. Ah, papiex exposes yet another subtle bug.

2004-04-26  min
	* examples/Makefile 1.3:
	* examples/PAPI_add_remove_event.c 1.3:
	* examples/PAPI_get_opt.c 1.3:
	* examples/PAPI_profil.c 1.2:
	* examples/PAPI_set_domain.c 1.1:
	* examples/locks_pthreads.c 1.1:
	* examples/overflow_pthreads.c 1.2:
	* examples/sprofile.c 1.1:
		
		add some example programs

2004-04-23  mucci
	* ctests/do_loops.c 1.23:
	* ctests/dummy.c 1.6:
	* ctests/multiplex2.c 1.17:
	* ctests/multiplex3_pthreads.c 1.23:
	* ctests/test_utils.h 1.26:
		Added fortran bindings do dummy and do_loops. Added MAX_TO_ADD variable in
		test_utils.h and updated that in the other tests.

	* papi.c 1.233:
		Changed debugging statement when master thread is initialized to dump
		PID and old PID if there is one.

	* p3_events.c 1.23:
		Count only PACKED SSE/SSE2 instructions for PAPI_VEC_INS on the Opteron.
		test case coming soon...

	* ftests/Makefile 1.50:
	* ftests/do_loops.F 1.5:
	* ftests/dummy.F 1.2:
	* ftests/fmultiplex1.F 1.23:
	* ftests/fmultiplex2.F 1.16:
		Now using the do_loops and dummy from the C tests for synchronicity.
		Removes test failures.

2004-04-20  jthomas
	* unicos-ev5.c 1.40:
		Update of _papi_hwd_read() to a better guess.  The t3e is
		still awaiting testing.

2004-04-19  min
	* examples/Makefile 1.2:
	* examples/PAPI_add_remove_event.c 1.2:
	* examples/PAPI_add_remove_events.c 1.2:
	* examples/PAPI_get_executable_info.c 1.2:
	* examples/PAPI_get_opt.c 1.2:
	* examples/PAPI_get_real_cyc.c 1.2:
	* examples/PAPI_get_virt_cyc.c 1.2:
	* examples/PAPI_hw_info.c 1.2:
	* examples/PAPI_overflow.c 1.2:
	* examples/PAPI_perror.c 1.1:
	* examples/PAPI_profil.c 1.1:
	* examples/PAPI_reset.c 1.1:
	* examples/PAPI_state.c 1.1:
	* examples/multiplex.c 1.1:
	* examples/overflow_pthreads.c 1.1:
		
		add some example programs

2004-04-14  terpstra
	* papiStdEventDefs.h 1.29:
		Added parentheses to #defines to guarantee proper precedence during preprocessing. This makes the weird errors noticed yesterday disappear.
		Thanks, Joe!

2004-04-13  terpstra
	* papiStdEventDefs.h 1.28:
		OK. So I'm stubborn and belligerent. I didn't want to give up the enum table of events, in spite of the fact that negative enums are not defined by ANSI. I converted the enum table into an index table of positive zero-based values. Then I mapped those values onto event definitions by or-ing in the PRESET_MASK bit.
		This way we can still maintain (and rearrange) events in the enum table, and the defines remain valid.
		Phil - didn't you want to rearrange the presets for PAPI_enum_events() to report events by category?

2004-04-13  mucci
	* ctests/do_loops.c 1.22:
		More optimization safety.

	* ftests/first.F 1.18:
		Made the same tolerance as C version. += 20%

	* ctests/papi_test.h 1.16:
	* ctests/test_utils.h 1.25:
		Standardized tolerance of .2. Added prototype for dummy(void *)

	* ctests/first.c 1.41:
		Added some debugging statements showing relative percentages of repeat
		measurements.

	* ctests/Makefile 1.104:
		Added headers as dependencies

2004-04-12  min
	* examples/Makefile 1.1:
	* examples/PAPI_add_remove_event.c 1.1:
	* examples/PAPI_add_remove_events.c 1.1:
	* examples/PAPI_flips.c 1.1:
	* examples/PAPI_flops.c 1.1:
	* examples/PAPI_get_executable_info.c 1.1:
	* examples/PAPI_get_opt.c 1.1:
	* examples/PAPI_ipc.c 1.1:
	* examples/PAPI_overflow.c 1.1:
	* examples/high_level.c 1.1:
		
		add some example programs to show how to use PAPI3.0 functions

	* examples/PAPI_get_real_cyc.c 1.1:
	* examples/PAPI_get_virt_cyc.c 1.1:
	* examples/PAPI_hw_info.c 1.1:
		
		add some example programs.

	* examples/add_event/Papi_add_env_event.c 1.4:
		
		This can't be use with PAPI3.0

	* linux-ia64.c 1.90:
		
		minor adjustment

2004-04-12  london
	* examples/add_event/Papi_add_env_event.c 1.5:
		Readding the Papi_add_env_event example, this one works with PAPI 3.0
		Please be careful will removing files.

2004-04-12  jthomas
	* unicos-ev5.c 1.39:
	* unicos-ev5.h 1.11:
	* unicos-memory.c 1.7:
		Very preliminary port of the t3e substrate.  Not tested
		whatsoever.  _papi_hwd_read, _papi_hwd_set_overflow
		_papi_hwd_get_system_info and _papi_hwd_get_memory_info
		still need attention.  The rest of the functions are merely
		good guesses until I can test.

2004-04-10  mucci
	* ctests/Makefile 1.103:
	* ctests/do_loops.c 1.21:
	* ctests/first.c 1.40:
	* ctests/memory.c 1.13:
	* ctests/multiplex1_pthreads.c 1.37:
	* ctests/papi_test.h 1.15:
	* ctests/profile.c 1.38:
	* ctests/profile_32.c 1.9:
	* ctests/profile_64.c 1.9:
	* ctests/profile_twoevents.c 1.9:
	* ctests/test_utils.h 1.24:
	* ctests/zero.c 1.26:
	* perfctr-2.6.x/usr.lib/Makefile 1.2:
		Fixed problem with get_hardware_info call. It was called before PAPI_library_init. Joe?
		
		Also, fixed the memory test. Now we should run this test on all platforms to
		verify the cache metrics. Please run this on your system and look at the numbers.
		:x

	* irix-mips.c 1.76:
		Added library preloading information.

	* Makefile.inc 1.92:
	* p3_events.c 1.22:
	* papi.c 1.232:
	* papi_internal.c 1.68:
		Fixed Opteron Branch preset. Inlined counter_read call and added a check
		for negative numbers from handle_derived
		
		Also, removed the chmod's from the install line. That is bad for other installations.

2004-04-08  terpstra
	* win2k/help/papi_matlab.html 1.5:
	* win2k/help/welcome.html 1.9:
		Updates for the PAPI 3 installer.
		The papi_matlab page still needs a rewrite.

	* ctests/native_avail.c 1.13:
		Changes to promote the modifiers for PAPI_enum_event to the user interface level (papi.h) for presets and substrates.
		I forgot to check these in earlier...

	* win2k/help/papi_matlab.html 1.6:
		Updates for the PAPI 3 Matlab stuff.

2004-04-07  terpstra
	* linux.c 1.25:
		Changes to properly identify Pentium 4, so we can fail
		gracefully in Windows.

	* win2k/shell/WinPAPIShell.c 1.12:
	* win2k/shell/WinPAPIShell.rc 1.11:
		More robust display of versioning for PAPI and the WinPMC
		driver.

	* win2k/winpmc/WinPMC.c 1.4:
		Comment out context switch hook. For some reason this causes
		the driver to fail for Win XP.

2004-04-06  terpstra
	* win2k/substrate/cpuinfo.c 1.10:
	* win2k/substrate/cpuinfo.h 1.6:
		Changes to support Pentium 4

2004-04-06  you
	* power4.c 1.22:
		add preset PAPI_L2_DCM implementation.

2004-03-31  mucci
	* ctests/Makefile 1.102:
	* ctests/zero_fork.c 1.1:
		New test case. I found bugs in PAPI/fork() with papiex on apps that fork. This
		test case I should have written a long time ago. This test does the following:
		
		It tests that when you are using PAPI and you fork(), you need to reinitialize
		the library in the new process. Because PAPI has been initialized to talk to the
		parent process and it has no idea that the fork occurred. Therefore the data
		structures and control information are for another process which is not the
		desired behavior in this case.
		
		This test needs to be a no-op for Windows.

	* Rules.perfctr-2.6.x 1.5:
		New install rule, uses make install in perfctr directory.

2004-03-29  min
	* ctests/shlib.c 1.7:
		comment out the dlerror check in Solaris

	* ctests/shlib.c 1.8:
		
		change the return error check condition after dlsym() function call.

	* Makefile.solaris-ultra 1.46:
	* svr4.c 1.2:
		comment out the printf statement

2004-03-26  min
	* ctests/exeinfo.c 1.2:
	* ctests/shlib.c 1.6:
		
		ease the check condition for data segment address

	* Makefile.solaris-ultra 1.45:
	* papi.c 1.231:
	* papi_internal.c 1.67:
	* papi_internal.h 1.133:
	* solaris-ultra.c 1.70:
	* solaris-ultra.h 1.27:
	* svr4.c 1.1:
		
		1. added an running_eventset field in the thread structure, so that the
		   user will get an error message when he call PAPI_start another event
		   set without stop the current running eventset;
		
		2. first cut in _papi_hwd_update_shlib_info for svr4 operating system,
		   only tested in solaris.

2004-03-26  jthomas
	* papi.c 1.229:
		Fixed a seg fault due to an overwrite of an old fix - from
		version 1.220:
		
		Removed the _papi_hwd_ctl() from the PAPI_DEFDOM case in PAPI_set_opt.
		This removes a bug that will either result in a seg fault or papi
		error when trying to set the default domain.  I'm not sure if this is
		the proper fix, but it does remove the bug.  The thinking is that if
		you want to change the default domain, then you don't want to change
		the current eventset's domain.  If you want to change the current
		eventset's domain, you would use PAPI_DOMAIN instead of PAPI_DEFDOM.
		So, _papi_hwd_ctl is not needed.

	* papi.c 1.230:
		Replaced some more overwritten changes.

2004-03-24  you
	* aix-power.c [papi-2-3-4] 1.33.4.1.2.6:
	* aix-power.h [papi-2-3-4] 1.11.6.1:
		change START_OF_TEXT to be &_text

	* Makefile.aix-power4-64bit [papi-2-3-4] 1.2.2.3:
	* Makefile.aix5-power3-64bit [papi-2-3-4] 1.1.2.2:
		get rid of -D_P64

2004-03-23  jthomas
	* p3_events.c 1.21:
	* perfctr-p3.c 1.34:
	* perfctr-p3.h 1.24:
		Fixed a boundary condition bug showing up in native_avail and
		probably other places for the x86 substrates.  While fixing the bug
		I removed several variables related to native table size.

2004-03-22  terpstra
	* aix.c 1.33:
	* p4_events.c 1.28:
	* papi.h 1.107:
		Changes to promote the modifiers for PAPI_enum_event to the
		user interface level (papi.h) for presets and substrates. 
		Preset modifiers aren't implemented yet. If you add modifier
		values to a substrate, add values to the enum in papi.h. 
		Currently supported on Pentium4, POWER4; tested on Pentium4.

2004-03-22  mucci
	* papi.c 1.228:
		Windows ifdef

	* papi.c 1.227:
	* papi_internal.h 1.132:
		Added getpid() code to initialization path to detect people that have forked() and
		want to reinitialize. Added extern statements to end of papi_internal.h.

2004-03-17  london
	* ftests/Makefile 1.49:
		Fix for another install problem on Solaris

2004-03-11  london
	* ftests/Makefile 1.48:
		Fixes so install works correctly

	* Rules.perfctr-2.4.x 1.4:
	* Rules.perfctr-2.6.x 1.4:
		Changed DESTDIR to PREFIX

	* Makefile.inc 1.91:
		Changes to the install directory structure to stop:
		installing to:  PREFIX/share/papi/share/papi/ctests

2004-03-11  min
	* ctests/shlib.c 1.5:
	* dadd-alpha.c 1.25:
	* tru64-alpha.c 1.41:
	* tru64-alpha.h 1.15:
		
		Now in tru64-alpha shlib skips the test and exeinfo can pass the test
