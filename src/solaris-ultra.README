Bugs
----

1) Only the Ultra I/II are currently supported. Where's my Ultra 3?
2) Some of the cache events have documented bugs, see the Sun UltraSparc
hardware reference manual.
3) WARNING FOR PEOPLE USING MULTITHREADED LIBRARIES ON SOLARIS 2.8

There is a bug that prevents setitimer() from being called after
the process has called pthread() create at any point in time. Therefore
if you suspect your communication library is multithreaded, you had better
start the instrumentation before initializing it. See multiplex3_pthreads for
details.

Comments
--------

* Assembler stubs for get_tick() and cpu_sync() as well as the following 
defines have been blatantly stolen from the perfmon code. The author of
the package "perfmon" is Richard J. Enbody and the home page for 
"perfmon" is http://www.cps.msu.edu/~enbody/perfmon/index.html

* The native encoding is as always: 8 bit event code in bits 8-16, counter number in
bits 0-7. 

Counter 0 Events.

#define PCR_S0_CYCLE_CNT    	(0x0)
#define PCR_S0_INSTR_CNT    	(0x1)
#define PCR_S0_STALL_IC_MISS 	(0x2)
#define PCR_S0_STALL_STORBUF 	(0x3)
#define PCR_S0_IC_REF	    	(0x8)
#define PCR_S0_DC_READ	    	(0x9)
#define PCR_S0_DC_WRITE	    	(0xa)
#define PCR_S0_STALL_LOAD   	(0xb)
#define PCR_S0_EC_REF	    	(0xc)
#define PCR_S0_EC_WRITE_RO  	(0xd)
#define PCR_S0_EC_SNOOP_INV 	(0xe)
#define PCR_S0_EC_READ_HIT  	(0xf)

Counter 1 events

#define PCR_S1_CYCLE_CNT    	(0x0)
#define PCR_S1_INSTR_CNT    	(0x1)
#define PCR_S1_STALL_MISPRED 	(0x2)
#define PCR_S1_STALL_FPDEP	(0x3)
#define PCR_S1_IC_HIT		(0x8)
#define PCR_S1_DC_READ_HIT	(0x9)
#define PCR_S1_DC_WRITE_HIT	(0xa)
#define PCR_S1_LOAD_STALL_RAW	(0xb)
#define PCR_S1_EC_HIT		(0xc)
#define PCR_S1_EC_WRITEBACK	(0xd)
#define PCR_S1_EC_SNOOP_COPYBCK	(0xe)
#define PCR_S1_EC_IC_HIT	(0xf)
