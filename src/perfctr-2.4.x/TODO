Compilation problems:
- A perfctr-patched kernel can't be compiled on an unsupported
  arch (e.g. x86_64) since <linux/perfctr.h> always tries to
  include <asm/perfctr.h>, which only exists for i386.

API:
- long long has unspecified alignment in i386 but specified
  8-byte alignment in x86_64. To ease x86_64 support for i386
  binaries, ensure that all long long fields are 8-byte aligned.
- 2.5.23 dropped smp_num_cpus and cpu_logical_map(). The API to
  global-mode counters uses logical cpu numbers [0..smp_num_cpus[
  which won't work in 2.5/2.6.
- Global-mode counters need CPU masks for HT P4s.
- VPERFCTR_STOP is subsumed by VPERFCTR_CONTROL.

Driver:
- When an overflown perfctr is reset, we should take into account
  how many events past 0 or 1 it is at.
- Make set_cpus_allowed() more robust, especially wrt sched_setaffinity().

Library:
- Change usr.lib/Makefile to build .so from -fPIC objects; needed for x86_64.
- Add vperfctr_mmap() to libperfctr.c: the goal is to perform all
  accesses via the library, even for examples/perfex/.
- Implement gethrvtime(). Don't ever STOP the counters. To stop PMC
  updates, call CONTROL with tsc_on == 1 and nractrs == nrictrs == 0.
  The driver will continue sampling the TSC. Then gethrvtime() reduces
  to scaling the virtualised TSC with cpu_khz.
- Split libperfctr.c's core/virtual/global/misc stuff into separate files.
- Describe P4 events in event_set.c.
- Describe both primitive and derived events in event_set.c.

Documentation:
- Write it :-(

Possible Changes:
- The P6 and P4 sub-models don't matter for the driver. Should the driver
  just export the major model and the cpuid, and let user-space figure
  out sub-model details?
- Access control mechanism for global-mode perfctrs?
- Interrupt support for global-mode perfctrs?
- Multiplexing support? PAPI seems to do fine w/o it.
- A "kernel profiling" mode which uses global-mode perfctrs in
  interrupt mode to profile the kernel?
- Buffer interrupts and signal user-space when buffer is nearly full?
