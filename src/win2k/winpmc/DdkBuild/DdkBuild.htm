<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0057)http://www.hollistech.com/Resources/ddkbuild/ddkbuild.htm -->
<HTML><HEAD><TITLE>DdkBuild</TITLE>
<META http-equiv=Content-Language content=en-us>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="MSHTML 6.00.2600.0" name=GENERATOR>
<META content=FrontPage.Editor.Document name=ProgId><!--mstheme--><LINK 
href="DdkBuild_files/indu1000.css" type=text/css rel=stylesheet>
<META content="indust 1000, default" name="Microsoft Theme">
<META content="tb, default" name="Microsoft Border"></HEAD>
<BODY><!--msnavigation-->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P align=center><IMG height=60 alt=DdkBuild 
      src="DdkBuild_files/ddkbuild.htm_cmp_indust000_bnr.gif" width=600 
      border=0> </P>
      <P align=center> </P>
      <P align=center> </P></TD></TR><!--msnavigation--></TBODY></TABLE><!--msnavigation-->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR><!--msnavigation-->
    <TD vAlign=top>
      <HR>

      <H2 align=left>Contents</H2>
      <P align=left><A 
      href="http://www.hollistech.com/Resources/ddkbuild/ddkbuild.htm#Whats New"><FONT 
      color=#0000ff>What's New</FONT></A></P>
      <P><A 
      href="http://www.hollistech.com/Resources/ddkbuild/ddkbuild.htm#Introduction"><FONT 
      color=#0000ff>Introduction</FONT></A></P>
      <P><A 
      href="http://www.hollistech.com/Resources/ddkbuild/ddkbuild.htm#DdkBuild"><FONT 
      color=#0000ff>Ddkbuild</FONT></A></P>
      <P><FONT color=#0000ff><A 
      href="http://www.hollistech.com/Resources/ddkbuild/ddkbuild.htm#Get On With It Already">Get 
      On With It Already</A></FONT></P>
      <P><FONT color=#0000ff><A 
      href="http://www.hollistech.com/Resources/ddkbuild/ddkbuild.htm#Advanced Topics- AKA enabling Browse.">Advanced 
      Topics- AKA enabling Browse.</A></FONT></P>
      <P><FONT color=#0000ff><A 
      href="http://www.hollistech.com/Resources/ddkbuild/ddkbuild.htm#Advanced Topics - Project Management">Advanced 
      Topics - Project Management.</A></FONT></P>
      <P><FONT color=#0000ff><A 
      href="http://www.hollistech.com/Resources/ddkbuild/ddkbuild.htm#Ddkbuild Command Line Usage">Ddkbuild 
      Command Line Usage.</A></FONT></P>
      <P><FONT color=#0000ff><A 
      href="http://www.hollistech.com/Resources/ddkbuild/formresult1.htm">Download 
      the damn thing</A></FONT></P>
      <P><A 
      href="http://www.hollistech.com/Resources/ddkbuild/ddkbuild.htm#NOTES"><FONT 
      color=#0000ff>NOTES</FONT></A></P>
      <H2><A name="Whats New">What's New</A></H2>
      <P>Version 3.6 supports the XP, W2K and NT4 DDKs. NT4 support is not fully 
      tested, so if you have problems (on NT4,) please download version 3.3 
      instead. New for version 3.6: XP DDK builds can now specify windows 2000 
      mode. If you only want one DDK installed, this could be a good choice for 
      you.</P>
      <P>If you are not running the standard NT shell, like for example if you 
      are running that thing on windosme9x, please do not bother me with your 
      complaints. Sorry.</P>
      <P>Version 3.5 introduced support for the XP Beta 2 DDK. Support includes 
      both x86 and IA64 builds.</P>
      <P>Version 3.4 added W2K 64bit build support (obsolete.) Version 3.4 and 
      later <B>DO NOT RUN ON NT4</B> due to command shell syntax issues. Use 
      version 3.3 for NT4. (Version 3.3 has W2K support.) See above, the latest 
      version of ddkbuild supports NT4 W2K and XP. Unless of course it doesn't 
      :-). Actually the latest version of ddkbuild tries to figure out if you 
      are running on NT4 and then runs what ought to be the 3.3 version of 
      ddkbuild, which happens to be contained inside ddkbuild itself. Isn't that 
      special?</P>
      <H2><A name=Introduction>Introduction</A></H2>
      <P>A long, long time ago in a far away place I started building NT 
      operating system components. Much to my horror I discovered that rather 
      than a nice gui'd set of tools, the standard kernel build environment 
      looked a bit like this:</P><IMG height=451 
      src="DdkBuild_files/ddkbui1.jpg" width=668 border=0> 
      <P><I>Figure 1. </I><I>I don't know, I'm sure it is all subjective, but 
      the word "fugly" comes to mind.&nbsp;</I></P>
      <P>The standard NT kernel build environment reminds one of the 
      <I>ultra-sophisticated</I> (and I suppose oh so retro-trendy these days, 
      freakin penguin heads everywhere,) pre-X, pre-Emacs Unix development 
      environment of <I>vi</I> and <I>make</I>.&nbsp;</P>
      <P>I really love that NT 'shell' (and I use the term loosely) and in fact 
      the idea of groveling through the scrolled-away output of build, or those 
      lovely build log files using <I>notepad,</I> searching for error messages, 
      combined with whatever code editor floats your boat (as in you need three 
      applications with no clue of what the others are doing,) just <I>thrills 
      </I>me. I'm sure you feel the same way.</P>
      <P>I have a few simple requirements when it comes to software 
      development:</P>
      <UL>
        <LI>Editor/Compiler integration. 
        <LI>Source code browsing (as in Unix tags.) </LI></UL>
      <P>That isn't a very big list, is it?</P>
      <P>&nbsp;In addition, I don't want my development environment to do 
      anything that might even possibly compromise the actual output of the 
      process. In other words, I want to be absolutely (or at least very highly) 
      certain that whatever tools I use are producing valid results.</P>
      <P>So faced with what to me was the unacceptable NT DDK way of doing 
      things, I set out to develop my own tools that would integrate the 
      VisualStudio IDE with the NT DDK, getting me most of what I find useful in 
      the IDE without compromising at all the integrity of the build process. 
      Thus was born <B>ddkbuild.bat</B>.</P>
      <H2><A name=DdkBuild>DdkBuild</A></H2>
      <P>DdkBuld has gone through three incarnations. It was born at Sequoia 
      Systems, in the midst of a rather painful corporate collapse. It traveled 
      from Sequoia to OSR with its creator, and there became the standard 
      VIsualStudio/Build integration tool for OSR and, rumor has it, quite a few 
      other places as well. The hardest part of using ddkbuild was in fact 
      trying to download it from OSR's web site, a problem I never quite 
      understood the genesis of, but resolved by departing from OSR, taking my 
      little friend ddkbuild with me. (Oh a version is still available from OSR 
      (<A href="http://www.osr.com/">http://www.osr.com/</A>,) but as far as I 
      know it remains near-impossible to find.)</P>
      <P>The latest incarnation of ddkbuild, the one described in detail in this 
      article, has been changed to accommodate the evolution of the NT DDK into 
      the Windows 2000 DDK (there are some differences.) And represents all the 
      author ever really wants to know about writing NT command shell 
      scripts.&nbsp;</P>
      <P>What is ddkbuild? It is an NT command shell script. A <I>bat</I> 
      file.&nbsp;</P>
      <P>What does ddkbuild do? It does a lot of things, but mostly it does 
      exactly what that crufty checked or free build environment ddk window 
      does, that is it sets up the correct environment for executing build, and 
      then in invokes build.</P>
      <P>Huh? What's the point? Oh, yes well ddkbuild does things in such a way 
      that it is really easy to set up a VisualStudio project that will, through 
      the vehicle of ddkbuild, integrate with the NT build process.</P>
      <P>Oh, fine but I'll just use that <A 
      href="http://www.numega.com/drivercentral/tech_tips/srctodsp.shtml">SrcToDsp</A> 
      thing from Numega. Ok, that's a really neat tool. It does have its limits 
      though. I'm still looking for the DspToSrc utility :-) Remember that what 
      I want is a process that uses the standard NT build tools <I>and</I> 
      integrates with VisualStudio. <B>Ddkbuild does not preclude using the DDK 
      shell windows for building your projects, in fact it encourages 
it.</B></P>
      <TABLE width="100%" bgColor=#008000 border=4>
        <TBODY>
        <TR>
          <TD width="100%" bgColor=#c0c0c0>
            <P><FONT size=5>For those of you who are just looking for the latest 
            version of <A 
            href="http://www.hollistech.com/Resources/ddkbuild/formresult1.htm">DdkBuild.bat</A>. 
            Look no further.</FONT></P>
            <P>&nbsp;</P></TD></TR></TBODY></TABLE>
      <H2><A name="Get On With It Already">Get On With It Already</A></H2>
      <P>Ok, so here is the step-by-step algorithm for moving an existing NT DDK 
      project into the IDE with DdkBuild. We will also discuss very briefly how 
      to create a new build project in the IDE.</P>
      <P>But first a word from our sponsor: folks please remember that what 
      drives the creation of a NT DDK Build based software project is the 
      <B>Sources</B> file that describes the project components. The process I'm 
      describing here works <I><B>with</B></I> the DDK build process <I>it does 
      not replace it.</I> You want a <I>Driver Wizard?&nbsp;</I> Try&nbsp; <A 
      href="http://www.bluewatersystems.com/index.html">http://www.bluewatersystems.com/index.html</A> 
      or <A 
      href="http://www.uw.com/drivercentral/examples/demos.shtml">http://www.uw.com/drivercentral/examples/demos.shtml</A> 
      for one of those puppies.</P>
      <P>Let's take an existing W2K driver, in fact we will use the one pictured 
      way up as the fugly figure 1, the acpi ec driver.</P>
      <H3>1. Start your engines</H3>
      <BLOCKQUOTE>
        <P>Fire up VisualStudio, and pull down the File/New PropertyPage. Select 
        the Projects tab and under the list of project types select Makefile. 
        Now you need to <I>carefully&nbsp;</I> select a project name and 
        location. Keep in mind that what VisualStudio would like to do is create 
        a new directory for you and your new project. Also remember that the 
        <B>Project Name</B> field and the <B>Location</B> field are deeply 
        entwined with each other. What you type into <B>Project Name</B> is 
        appended to whatever happens to be in <B>Location</B>. This is 
        <I><B>very frequently not what you want or expect!</B>&nbsp;</I></P>
        <P>What we want is a project named ec located in the directory path 
        G:\NtDDK\src\wdm\acpi\ec. So we type in or browse to 
        <I>G:\NTDDK\src\wdm\acpi</I> in the <B>Location</B> field, and we type 
        in <I>ec</I> in the <B>Project Name </B>field. Our Projects Tab in the 
        New Property Page Dialog should look like this:</P>
        <P><IMG height=400 src="DdkBuild_files/ddkbui2.jpg" width=561 
        border=0></P>
        <P><I>Figure 2. New Dialog (less fugly)</I></P>
        <H3>2. The Project Wizard</H3>
        <P>We are creating an external makefile project (which by the way is all 
        documented in the help docs for VisualStudio,) so the next thing that 
        happens is that we get confronted by the <I>External Makefile Project 
        Wizard.</I></P>
        <P>Remember: wizards are your friends!</P>
        <P>Click OK on the Projects tab. Here comes the wizard, he/she/it looks 
        like this:</P>
        <P><IMG height=384 src="DdkBuild_files/ddkbui3.jpg" width=477 
        border=0></P>
        <P><I>Figure 3. Makefile Project Wizard Step 1 of 2</I></P>
        <P>You need to make some changes to the defaults.</P>
        <P>The <B>Command Line</B> field needs to be replaced with: <I>ddkbuild 
        -W2k checked .</I></P>
        <P>Lets parse this change.&nbsp;</P>
        <P><I>ddkbuild&nbsp;&nbsp;&nbsp; </I>this is the shell script (which you 
        may download from here) that will run <I>build.exe</I> for us in the 
        appropriate environment. <A 
        href="http://www.hollistech.com/Resources/ddkbuild/ddkbuild.htm#4. Installing Ddkbuild.bat">Installation 
        of ddkbuild</A> is covered later.</P>
        <P><I>-W2K&nbsp;&nbsp;&nbsp;</I>&nbsp;&nbsp;&nbsp;&nbsp; this option, 
        which must be the first option on the command line if it is used, 
        indicates that this is a Windows 2000 project. Ddkbuild must do some 
        special processing to get the Windows 2000 DDK build environment working 
        properly. Once again there is more on this subject when we discuss <A 
        href="http://www.hollistech.com/Resources/ddkbuild/ddkbuild.htm#4. Installing Ddkbuild.bat">installation 
        of ddkbuild.</A></P>
        <P><I>checked&nbsp;&nbsp;&nbsp;</I> you have to tell ddkbuld what type 
        of driver you are building, a checked driver or a free driver. If -W2K 
        is specified, then checked/free must be the second parameter, otherwise 
        checked/free must be the first parameter.</P>
        <P><I>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        </I>huh? That's a dot, a period. Actually this parameter is the location 
        of the target project. Very conveniently, VisualStudio sets the current 
        working directory to the location of the active project. Consequently, 
        dot (.) is the location of the project.&nbsp;</P>
        <P>The next field, <B>Output</B>, can be ignored. If this bothers you, 
        you can put your name here, or the date, or what you think of your boss, 
        or anything else that comes to mind.</P>
        <P>The final field, <B>Rebuild All Switch</B>, can also be left as it 
        is. It is however, not ignored. The contents of this field are fed to 
        ddkbuild as the last command line parameter if you select rebuild all as 
        an IDE action in VisualStudio. Ddkbuild understands /a and will do the 
        right thing with respect to invoking build.</P>
        <P>When you are finished modifying this wizard panel it should look like 
        this one:</P>
        <P><IMG height=384 src="DdkBuild_files/ddkbui4.jpg" width=477 
        border=0></P>
        <P><I>Figure 4. Step 1 of 2 - Ready To Go!</I></P>
        <P>As soon as you click the Next button you will proceed to <I>Makefile 
        - Step 2 of 2.</I></P>
        <P>This panel is identical to the previous one, except that it wants you 
        to specify the settings for a release build of your project. All you 
        need to do is change <I>checked&nbsp;</I> to <I>free</I>. Otherwise the 
        settings are exactly the same as panel one.</P>
        <P>Punch the finish button and you are done with this step.</P>
        <H3>3. Filling in the project details</H3>
        <P>I do have to stress once again that what we have here is a manual 
        process that integrates the DDK build process with the VisualStudio 
        development environment. So after the foolish wizard is done what we 
        have for a project is exactly nothing. Oddly enough it will build just 
        fine (that is it will build just fine after you have <A 
        href="http://www.hollistech.com/Resources/ddkbuild/ddkbuild.htm#4. Installing Ddkbuild.bat">installed 
        ddkbuild.bat</A> correctly, more on that later.)</P>
        <P>However it would be nice to have access to the project files. So what 
        we need to do is add the appropriate files to the project. To do this 
        click on the FileView tab in the project workspace window. You should 
        see something like this:</P>
        <P><IMG height=611 src="DdkBuild_files/ddkbui5.jpg" width=648 
        border=0></P>
        <P><I>Figure 5. An Incomplete Project. (Semi-fugly.)</I></P>
        <P>If you point the mouse cursor at the <B>ec files</B> line and right 
        click on the mouse you will get a pop-up menu that includes an option to 
        <I>Add Files to Project...</I> Select that option.</P>
        <P>This will bring up the <I>Insert Files into Project </I>dialog. Make 
        sure that <I>Files of type</I> is set to al files (*.*). Now select all 
        the .c, .h .rc files, plus the Sources file and the Makefile, and the 
        .inf file and the .htm file if they exist. Click on OK.&nbsp; Your 
        FileView should now look like this:</P>
        <P><IMG height=611 src="DdkBuild_files/ddkbui6.jpg" width=648 
        border=0></P>
        <P><I>Figure 6. A Project Fulfilled.</I></P>
        <P>For the most basic features of ddkbuild, this is all that needs to be 
        done to create a VisualStudio project from an existing DDK project.</P>
        <H3><A name="4. Installing Ddkbuild.bat">4. Installing 
        Ddkbuild.bat</A></H3>
        <P>In order to actually test drive ddkbuild it has to be installed. The 
        download is an NT command script, a bat file. It needs to be located in 
        a location where VisualStudio will find it. I installed my copy in the 
        VisualStudio\common\Tools directory, but you can install it anywhere 
        that VisualStudio will find it.</P>
        <P><B>Warning: the PlatformSdk and VisualStudio come with different and 
        slightly incompatible linkers. You can build a driver correctly with 
        either one, but you should also only use one of these linkers or the 
        other. Set your paths appropriately.</B></P>
        <H4>Oh, there is this wee change in the Windows 2000 DDK.</H4>
        <P>You see prior to one of those W2K betas (rc1 or 2) ddkbuild use the 
        environment variable BASEDIR to figure out where the DDK was installed. 
        Note the singular nature of <I>the environment variable</I>. The W2K DDK 
        does not believe that it is the one and only true DDK installed on your 
        system. There is no BASEDIR environment variable as far as this DDK is 
        concerned. or more specifically BASEDIR is constructed on the fly every 
        time you open one of those <I>fugly</I> shells (see figure 1.)&nbsp;</P>
        <P>Small problem for ddkbuild. Resolved by the addition of the -W2K 
        flag, and a little work by you. To build a W2k project you must set the 
        -W2K flag in the command line that invokes ddkbuild.bat <B>and</B> you 
        must create an environment variable named W2KBASE that locates the W2K 
        DDK. My W2K DDK is located at G:\NTDDK so W2KBASE on my system is set to 
        G:\NTDDK.</P>
        <H3>5. Test Drive</H3>
        <P>You should now be able to simply fire up a build from the 
        VisualStudio IDE. The steps above will give you the ability to build a 
        project within VisualStudio <I>or outside VisualStudio using the 
        standard fugly process (see figure 1.)</I> If there are compilation 
        errors, VisualStudio will take right to the chapter and verse of your 
        source code that offends the compiler, just like any other VisualStudio 
        project.</P>
        <P>Not only that, but if you look at the ClassView tab you will discover 
        that a lot of your data structures and functions are now browsable from 
        the ClassView window:</P>
        <P><IMG height=857 src="DdkBuild_files/ddkbui7.jpg" width=602 
        border=0></P>
        <P><I>Figure 7. Classview Doesn't Suck!</I></P>
        <P>Now this isn't half shabby, but it isn't all there. Read on, oh 
        searcher for a functional kernel development environment, for soon we 
        will have browsing.</P>
        <H2><A name="Advanced Topics- AKA enabling Browse.">Advanced Topics- AKA 
        enabling Browse.</A></H2>
        <P>Classview is ok but it doesn't do anything for data structures or 
        functions that aren't defined in the current project. In fact, despite 
        its pretty gui look, ClassView is pretty damn stupid as far as source 
        code browsers are concerned. What I require (see requirements above) is 
        something equivalent to Unix tags (or more exactly, what I had using 
        Xemacs and etags.) I want to point at some source object and click on 
        some widget and end up at the definition of that thing. Not only that I 
        need to be able to do what Cscope did for me: show me all the references 
        to an object, and show me the call tree for any function or the inverse 
        call tree for any function. The VisualStudio Browse facility does all 
        that. so all we need to do is make it work with build and our new friend 
        ddkbuild.</P>
        <P>No problemo.</P>
        <P>The massively non-existent documentation for the DDK build process 
        clearly spells out how to enable generation of browse (.bsc) files for a 
        Sources based project. If the documentation existed it would say add the 
        following lines to a Sources file:</P>
        <P>#<BR># setup visualC++ source 
        browsing<BR>#<BR>BROWSER_INFO=1<BR>BROWSERFILE=$(TARGETNAME).bsc -n</P>
        <P>The first line enables generation of .sbr files, the intermediate 
        file generated for each .obj file to create a .bsc browse file.</P>
        <P>The second line sets the name of the .bsc file to our project target 
        name. We also sneak in the '-n' option to BscMake here so that Bscmake 
        does <B>NOT </B>truncate .sbr files. This is just the opposite behavior 
        from the default VisualStudio behavior, but unless you have a very slow 
        processor and a very small hard drive I strongly suggest you follow what 
        I'm doing up above. You will be much happier.</P>
        <P><B>Note:</B> Starting with the Windows 2000 DDK the SOURCES macros 
        for setting up browse file generation were <I>normalized</I> to be more 
        like the other tool invocation macros. The following line:</P>
        <P>BSCMAKE_FLAGS=$(BSCMAKE_FLAGS) -n</P>
        <P>can be substituted for the BROWSERFILE= macro definition above.&nbsp; 
        By default your .bsc file will end up wherever you demanded that your 
        target be placed, so unless you really want to have the .bsc file in one 
        place and the .sys file in another, you can just drop the BROWSERFILE= 
        macro from your sources file.</P>
        <P>To go back to our example, the ec driver from the ddk, we open the 
        Sources file and add the browse enabling lines. Our sources file now 
        looks like this:</P>
        <P><IMG height=557 src="DdkBuild_files/ddkbui8.jpg" width=674 
        border=0></P>
        <P><I>Figure 8. Now we have browsing!</I></P>
        <P>Now we do a clean build of ec by selecting the menu option 
        <I>Build/Rebuild All</I>.</P>
        <P>The Build output window should indicate that good things have 
        happened:</P>
        <P><IMG height=850 src="DdkBuild_files/ddkbui9.jpg" width=674 
        border=0></P>
        <P><I>Figure 9. Rebuild the ec driver with browsing.</I></P>
        <P>We need to do one more thing. Select the 
        <I>Project/Settings&nbsp;</I> menu option. Fill in the <B>Browse info 
        file name </B>field with the name of the .bsc file created by build. In 
        this case the file is named <B>acpiec.bsc. </B>You may need to build the 
        project again to convince VisualStudio that this project is 
        browsable.</P>
        <P>Now you should be able to point at any data structure type or 
        function or constant and right click on it and go to its definition. In 
        addition, a CallGraph or CallersGraph is available for all functions as 
        well as a reference list for all data structures and functions. Life is 
        complete, all is bliss.</P>
        <H2><A name="Advanced Topics - Project Management">Advanced Topics - 
        Project Management</A></H2>
        <P>If you add or remove source files you have to modify both the 
        VisualStudio project and the Sources file. Consequently if you are going 
        to create a <B>new</B> project, you have to remember to create a Sources 
        file, a makefile, and anything else you might need. VisualStudio will 
        not do these steps for you as it doesn't know anything at all about how 
        to build a device driver or what build.exe is and what its requirements 
        are.</P>
        <H2><A name="Ddkbuild Command Line Usage">Ddkbuild Command Line 
        Usage</A></H2>
        <P>Version 3.6 and later:</P>
        <P><B>usage</B>: ddkbuild <I>[-W2K|-W2K64|-XP|-XP64|-XPW2K] checked | 
        free directory-to-build [flags] </I></P>
        <P>&nbsp;-<I>W2K</I> </P>
        <BLOCKQUOTE>
          <P>indicates development system uses W2KBASE environment variable to 
          locate the win2000 ddk, otherwise BASEDIR is used 
        (optional.)</P></BLOCKQUOTE>
        <P>&nbsp;-<I>W2K64</I> </P>
        <BLOCKQUOTE>
          <P>indicates development system uses W2K64BASE environment variable to 
          locate the win2000 64 ddk, otherwise BASEDIR is used 
        (optional.)</P></BLOCKQUOTE>
        <P>-<I>XP</I> </P>
        <BLOCKQUOTE>
          <P>indicates development system uses XPBASE environment variable to 
          locate the XP ddk, otherwise BASEDIR is used 
(optional.)</P></BLOCKQUOTE>
        <P>-<I>XP64</I> </P>
        <BLOCKQUOTE>
          <P>indicates development system uses XPBASE environment variable to 
          locate the XP ddk and builds IA64 binaries (optional.) </P></BLOCKQUOTE>
        <P>-<I>XPW2K</I> </P>
        <BLOCKQUOTE>
          <P>indicates development system uses XPBASE environment variable to 
          locate the XP ddk and buildsW2K compatible binaries (optional.) 
        </P></BLOCKQUOTE>
        <P><I>checked</I> </P>
        <BLOCKQUOTE>
          <P>indicates a checked build.</P></BLOCKQUOTE>
        <P><I>free</I></P>
        <BLOCKQUOTE>
          <P>&nbsp;indicates a free build (must choose one or the 
        other.)</P></BLOCKQUOTE>
        <P><I>directory</I> </P>
        <BLOCKQUOTE>
          <P>path to build directory, try . (cwd).</P></BLOCKQUOTE>
        <P><I>flags</I> </P>
        <BLOCKQUOTE>
          <P>any random flags you think should be passed to build (note that the 
          visual studio /a for clean build is translated to the equivalent build 
          flag.)</P></BLOCKQUOTE>
        <P>&nbsp;ex: <B>ddkbuild -XP checked . </B></P>
        <P>&nbsp;</P>
        <H2><A 
        href="http://www.hollistech.com/Resources/ddkbuild/formresult1.htm">Download 
        Ddkbuild.bat</A></H2>
        <H2><A name=NOTES>NOTES</A></H2>
        <H3>NOTE: </H3>
        <P>NT4.0 platforms require ddkbuild&nbsp; version 3.3. Version 3.4 and 
        later run on W2K and XP. This platform dependency concerns the build 
        machine, the machine ddkbuild runs on,<B> NOT THE TARGET YOUR DRIVERS 
        ARE BUILT FOR<FONT face="Trebuchet MS">*</FONT>.</B> Version 3.3 builds 
        both NT4 and W2K targets. Version 3.4 (no longer available) built NT4, 
        W2K, and W2k64 targets. Version 3.5 builds NT4, W2K, W2K64, XP and XP64 
        targets. </P>
        <H3>NOTE ALSO: </H3>
        <P>Support for building drivers on NT4 platforms is limited. Don't count 
        on any enhancements ever.</P>
        <H3>Note Finally: </H3>
        <P><I><B>Support for building drivers on that other operating system: 
        not if I have anything to say about it. That would include windos95, 
        windos98 and windos-minime. Don't ask. If you are running such a system 
        go play half-death or triablo or whatever.</B></I></P>
        <P><B><I><FONT face="Trebuchet MS" size=1>* for which your drivers are 
        built. And byte me.</FONT></I></B></P>
        <P>&nbsp;</P></BLOCKQUOTE>&nbsp;<!--msnavigation--></TD></TR><!--msnavigation--></TBODY></TABLE><!--msnavigation-->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P>&nbsp;</P></TD></TR><!--msnavigation--></TBODY></TABLE></BODY></HTML>
