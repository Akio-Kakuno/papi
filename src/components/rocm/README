/** 
* @file:   README
* CVS:     $Id$
* @author: Asim YarKhan yarkhan@icl.utk.edu
* @author: Heike McCraw mccraw@icl.utk.edu
* @defgroup papi_components Components
* @brief Component Specific Readme file: CUDA
*/

/** @page component_readme Component Readme 

@section Component Specific Information

Known problems and limitations in early release of metric support
-----------------------------------------------------------------

* If creation/destruction of EventSets is repeated dozens of times,
  the AMD portion of the software refuses further creation. Perhaps
  a limit is reached, or we are not performing some necessary 
  housekeeping. 
   
* Only sets of metrics and events that can be gathered in a single
  pass are supported.

* All metrics are returned as long long integers.


General information
-------------------

The PAPI ROCM component is a hardware performance counter measurement
technology for the AMD ROCM platform which provides access to the hardware
counters inside the GPU. The component is an adapter to the ROCm profiling
library (RPL, 'ROC-profiler') which is included in standard ROCM release.

How to install PAPI with the ROCM component?
-------------------------------------------- 

PAPI requires one environment variable: PAPI_ROCM_ROOT, but there are
four more needed at runtime for operation by AMD software. These added
environment variables are typically set as follows, AFTER
PAPI_ROCM_ROOT has been exported. An example is provided below,
setting PAPI_ROCM_ROOT to its default value:

export PAPI_ROCM_ROOT=/opt/rocm
export ROCP_METRICS=$PAPI_ROCM_ROOT/rocprofiler/lib/metrics.xml 
export ROCPROFILER_LOG=1
export HSA_VEN_AMD_AQLPROFILE_LOG=1
export AQLPROFILE_READ_API=1

The first of these, ROCP_METRICS, must point at a file containing the
descriptions of metrics. The standard location is shown above, the
final three are above are fixed settings.

For a standard installed system, these are the only environment
variables that need to be set, for both compile and runtime.

The above example works on ICL's Caffeine system.

Within PAPI_ROCM_ROOT, we expect the following standard directories:
PAPI_ROCM_ROOT/include
PAPI_ROCM_ROOT/include/hsa
PAPI_ROCM_ROOT/lib
PAPI_ROCM_ROOT/rocprofiler/lib
PAPI_ROCM_ROOT/rocprofiler/include 

After the exports shown above, PAPI must be configured and built.
When papi is installed, there will be a papi/src directory. Navigate
to that, and execute the following:

> ./configure --with-components="rocm"
> make 

If you are rebuilding PAPI, then before the configure step, execute
> make clobber

TESTING the component is installed: Still from papi/src:
> utils/papi_component_avail

If the component is functional, it will show that. Otherwise it will
report it is disabled, and provide a reason why.

You can see what events are provided by a working component as
follows: 
> utils/papi_native_avail | grep -i "rocm:::"



------------------------UNUSUAL INSTALLATIONS------------------------

System configurations can vary. Some systems use Spack, a package
manager, to automatically keep paths straight. Others (like our own
ICL Saturn System) require "module load" commands to provide some
services, e.g. 'module load rocm', and these may also set environment
variables and change the LD_LIBRARY_PATH search order.

Users may require the help of sysadmin personnel to navigate these
facilities and gain access to the correct libraries.

For the ROCM component to be operational, it must find the dynamic
libraries libhsa-runtime64.so and librocprofiler64.so. 

If these are not found (or are not functional) then the
component will be listed as "disabled" with a reason explaining the
problem. If libraries were not found, then they are not in the
expected places. The component can be configured to look for each of
these libraries in a specific place, and using an alternate name if
desired. Detailed instructions are contained in the Rules.rocm file.
They are technical, users may wish to enlist the help of a sysadmin.


// OLD STUFF
/** 
* @file:   README
* CVS:     $Id$
* @defgroup papi_components Components
* @brief Component Specific Readme file: ROCM
*/

/** @page component_readme Component Readme 

@section Component Specific Information

rocm/ 

ROCM component update: Support for ROCM metrics


Known problems and limitations in early release of metric support
-----------------------------------------------------------------

* Only sets of metrics and events that can be gathered in a single
  pass are supported.  Transparent multi-pass support is expected
* All metrics are returned as long long integers


General information
-------------------

The PAPI ROCM component is a hardware performance counter measurement
technology for the AMD ROCM platform which provides access to the hardware
counters inside the GPU. The component is an adapter to the ROCm profiling
library (RPL, 'ROC-profiler') which is included in standard ROCM release.


How to install PAPI with the ROCM component?
-------------------------------------------- 

This PAPI ROCm component has been developed and tested using ROCM
release 1.8.

These instructions are specific to the ICL environment; but may be useful to
users if translated to their own working or testing environments.

ICL testing was done (August 2019) on the ICL system "caffeine"; which has AMD
equipment installed, and the ROCM interface software installed at /opt/rocm.

Depending on your system, this software may require environment variables to be
defined. 

A shell script in papi/src/components/rocm/tests/run_papi.sh contains an
example of how to work with just the LD_LIBRARY_PATH (other than the four
exports are that are needed by the AMD RocProfiler). This script works on the
ICL test system Caffeine, you will need to change directory entries to match
your own system. In a shell script, those exports (setting environment
variables) go away when the shell exits. If you want to execute commands and
programs from the command line instead, export the same environment variables
from the command line.

Many users would rather not change LD_LIBRARY_PATH. We can operate instead
with different environment variables; those are described next. Note that
if these environment variables are never defined, our code will try the
default locations indicated below.

If your ROCM files are in these standard locations, you may not need to 
export any variables at all. 


Some environment variables are used at compile time, others at runtime, and 
some at both times.

-----COMPILE TIME-----
The following variables are shown with their default values. If these defaults
match your system, then you don't have to set them. Otherwise you can override
the default by setting them, generally by 'export PAPI_ROCM_XXX=newvalue'

PAPI_ROCM_ROOT      /opt/rocm
PAPI_ROCM_HSAINC    $(PAPI_ROCM_ROOT)/include/hsa
PAPI_ROCM_HSALIBS   $(PAPI_ROCM_ROOT)/lib
PAPI_ROCM_LIBS      $(PAPI_ROCM_ROOT)/lib
PAPI_ROCM_HSANAME   libhsa-runtime64.so 
PAPI_ROCM_LIBNAME   librocprofiler64.so 
PAPI_ROCM_RPROOT    $(PAPI_ROCM_ROOT)/rocprofiler
PAPI_ROCM_RPLIBS    $(PAPI_ROCM_RPROOT)/lib
PAPI_ROCM_RPINC     $(PAPI_ROCM_RPROOT)/include

-----RUNTIME-----
Two libraries are required for the PAPI ROCM component. We try to find them in
this order, with the following default names.
1) libhsa-runtime64.so (name can be overridden by export of PAPI_ROCM_HSANAME).
2) librocprofiler64.so (name can be overridden by export of PAPI_ROCM_LIBNAME).

We will look for PAPI_ROCM_HSANAME in the following directories, in this order,
if the environment variable is defined (otherwise we don't try it).

PAPI_ROCM_HSALIBS
PAPI_ROCM_LIBS
PAPI_ROCM_ROOT/lib  (default for PAPI_ROCM_ROOT is /opt/rocm).
Any LD_LIBRARY_PATH
Any default lib directory; e.g. /lib, /lib64, /usr/lib, /usr/lib64.

We will look for PAPI_ROCM_LIBNAME in the following directories, in this order,
if the environment variable is defined (otherwise we don't try it). We stop
searching and use the first library found.

PAPI_ROCM_RPLIBS
PAPI_ROCM_RPROOT/lib
PAPI_ROCM_ROOT/rocprofiler/lib
Any LD_LIBRARY_PATH
Any default lib directory; e.g. /lib, /lib64, /usr/lib, /usr/lib64

These exports assume you have papi installed in your $HOME directory.

ICL developers can copy-and-paste the following to the command line. The '#'
lines are not actually necessary. Either PAPI_ROCM_ROOT or LD_LIBRARY_PATH is
necessary. 

----ICL only Settings-----
# These ONLY for Caffeine (an ICL test machine). 
export PAPI_ROCM_ROOT=/opt/rocm/
export PAPI_ROCM_RPROOT=/home/adanalis/usr/rocprofiler
export ROCP_METRICS=$PAPI_ROCM_RPROOT/lib/metrics.xml
# export PAPI_ROCM_LIBS=/opt/rocm/lib
# export PAPI_ROCM_HSALIBS=/opt/rocm/lib
# export PAPI_ROCM_HSANAME=libhsa-runtime64.so
# export PAPI_ROCM_LIBNAME=librocprofiler64.so
# export LD_LIBRARY_PATH=$PAPI_ROCM_LIBS::$PAPI_ROCM_RPLIBS:$HOME/papi/src/:$LD_LIBRARY_PATH

# THESE work for Instinct (another test machine)
export PAPI_ROCM_ROOT=/opt/rocm/
export ROCP_METRICS=/opt/rocm/rocprofiler/lib/metrics.xml 

-----OTHER ENVIRONMENT VARIABLE REQUIREMENTS----
# The following non-PAPI-standard names are used by the rocprofiler library, which PAPI uses.
# (ROCP_METRICS is also used by rocprofiler; not by PAPI, but differs in the two examples above).
export ROCPROFILER_LOG=1
export HSA_VEN_AMD_AQLPROFILE_LOG=1
export AQLPROFILE_READ_API=1

-----EXAMPLE OF CONFIGURATION AND BUILD-----
Configure PAPI with ROCM enabled.  
    % # from papi install directory:
    % cd src
    % ./configure --prefix=some_location --with-components="rocm"

Build with PAPI_ROCM_ROOT and PAPI_ROCM_RPROOT specified
    % export PAPI_ROCM_ROOT=/opt/rocm/
    % export PAPI_ROCM_RPROOT=/home/adanalis/usr/rocprofiler
    % export ROCP_METRICS=/opt/rocm/rocprofiler/lib/metrics.xml 
    % export ROCPROFILER_LOG=1
    % export HSA_VEN_AMD_AQLPROFILE_LOG=1
    % export AQLPROFILE_READ_API=1
    % make 

To see if the component is active (and if not, why not):
    % utils/papi_component_avail

To find a list of ROCM supported events.
    % utils/papi_native_avail | grep rocm

