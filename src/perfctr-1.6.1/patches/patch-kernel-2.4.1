--- linux-2.4.1-perfctr/CREDITS.~1~	Tue Jan 30 15:07:29 2001
+++ linux-2.4.1-perfctr/CREDITS	Tue Feb 13 16:32:11 2001
@@ -2090,6 +2090,7 @@
 E: mikpe@csd.uu.se
 W: http://www.csd.uu.se/~mikpe/
 D: Miscellaneous fixes
+D: Performance-monitoring counters driver
 
 N: Reed H. Petty
 E: rhp@draper.net
--- linux-2.4.1-perfctr/Documentation/Configure.help.~1~	Tue Jan 30 15:07:29 2001
+++ linux-2.4.1-perfctr/Documentation/Configure.help	Tue Feb 13 16:32:11 2001
@@ -2923,6 +2923,82 @@
 
   If you don't know what to do, choose "386".
 
+Performance-monitoring counters support
+CONFIG_PERFCTR
+  This driver provides access to the performance-monitoring counter
+  registers available in some (but not all) modern processors.
+  These special-purpose registers can be programmed to count low-level
+  performance-related events which occur during program execution,
+  such as cache misses, pipeline stalls, etc.
+
+  The driver supports most x86-class processors known to have
+  performance-monitoring counters: Intel Pentium to Pentium III,
+  AMD K7 Athlon, Cyrix 6x86MX/MII/III, and WinChip C6/2/3.
+
+  On processors which have a time-stamp counter but no performance-
+  monitoring counters, such as the AMD K6 family, the driver supports
+  plain cycle-count performance measurements only.
+
+  You can safely say Y here, even if you intend to run the kernel
+  on a processor without performance-monitoring counters.
+
+  You can also say M here to compile the driver as a module; the
+  module will be called `perfctr.o'.
+
+Init-time hardware tests
+CONFIG_PERFCTR_INIT_TESTS
+  This option makes the driver run additional hardware tests
+  during initialisation. This is not necessary for normal
+  operation, but it can be useful during driver development.
+
+  If unsure, say N.
+
+Support WinChip processors
+CONFIG_PERFCTR_WINCHIP
+  The time-stamp counter is a standard facility on Pentium-class
+  processors for counting clock cycles. Normally, the time-stamp
+  counter is unrelated to the performance-monitoring counters.
+  However, WinChip C6/2/3 processors implement the time-stamp
+  counter by running the performance-monitoring counters in a
+  special mode, and then synthesising the 64-bit time-stamp from
+  the low 32 bits of both performance-monitoring counters.
+
+  One of several problems caused by this design is that all access
+  to the time-stamp counter must be disabled if the performance-
+  monitoring counters are to be used. This, in turn, will increase
+  the cost of time-keeping operations in both the kernel and user
+  applications.
+
+  To use the performance-monitoring counters on a WinChip processor,
+  you must select this option and also configure the kernel for a
+  processor model which does not imply a working time-stamp counter,
+  i.e. 386, 486, or generic 586.
+
+  If unsure, say N.
+
+Virtual performance counters support
+CONFIG_PERFCTR_VIRTUAL
+  The processor's performance-monitoring counters are special-purpose
+  global registers. This option adds support for virtual per-process
+  performance-monitoring counters which only run when the process
+  to which they belong is executing. This improves the accuracy of
+  performance measurements by reducing "noise" from other processes.
+
+  Say Y.
+
+Global performance counters support
+CONFIG_PERFCTR_GLOBAL
+  This option adds driver support for global-mode (system-wide)
+  performance-monitoring counters. In this mode, the driver allows
+  each performance-monitoring counter on each processor to be
+  controlled and read. The driver provides a sampling timer to
+  maintain 64-bit accumulated event counts.
+
+  Global-mode performance counters cannot be used if some process
+  is currently using virtual-mode performance counters, and vice versa.
+
+  Say Y.
+
 VGA text console
 CONFIG_VGA_CONSOLE
   Saying Y here will allow you to use Linux in text mode through a
--- linux-2.4.1-perfctr/Documentation/ioctl-number.txt.~1~	Tue Dec 12 13:57:57 2000
+++ linux-2.4.1-perfctr/Documentation/ioctl-number.txt	Tue Feb 13 16:32:11 2001
@@ -185,3 +185,5 @@
 0xB1	00-1F	PPPoX			<mailto:mostrows@styx.uwaterloo.ca>
 0xCB	00-1F	CBM serial IEC bus	in development:
 					<mailto:michael.klein@puffin.lb.shuttle.de>
+0xD0	all	performance counters	in development:
+					<mailto:mikpe@csd.uu.se>
--- linux-2.4.1-perfctr/MAINTAINERS.~1~	Tue Jan 30 15:07:29 2001
+++ linux-2.4.1-perfctr/MAINTAINERS	Tue Feb 13 16:32:11 2001
@@ -979,6 +979,12 @@
 L:	linux-net@vger.kernel.org
 S:	Maintained
 
+PERFORMANCE-MONITORING COUNTERS DRIVER
+P:	Mikael Pettersson
+M:	mikpe@csd.uu.se
+W:	http://www.csd.uu.se/~mikpe/linux/perfctr/
+S:	Maintained
+
 PNP SUPPORT
 P:	Tom Lees
 M:	tom@lpsg.demon.co.uk
--- linux-2.4.1-perfctr/Makefile.~1~	Tue Jan 30 15:07:29 2001
+++ linux-2.4.1-perfctr/Makefile	Tue Feb 13 16:32:11 2001
@@ -176,6 +176,7 @@
 DRIVERS-$(CONFIG_PHONE) += drivers/telephony/telephony.o
 DRIVERS-$(CONFIG_ACPI) += drivers/acpi/acpi.o
 DRIVERS-$(CONFIG_MD) += drivers/md/mddev.o
+DRIVERS-$(CONFIG_KPERFCTR) += drivers/perfctr/kperfctr.o
 
 DRIVERS += $(DRIVERS-y)
 
--- linux-2.4.1-perfctr/arch/i386/config.in.~1~	Tue Jan 30 15:07:29 2001
+++ linux-2.4.1-perfctr/arch/i386/config.in	Tue Feb 13 16:32:11 2001
@@ -198,6 +198,7 @@
 fi
 
 source drivers/pci/Config.in
+source drivers/perfctr/Config.in
 
 bool 'EISA support' CONFIG_EISA
 
--- linux-2.4.1-perfctr/arch/i386/kernel/process.c.~1~	Fri Jan  5 13:18:17 2001
+++ linux-2.4.1-perfctr/arch/i386/kernel/process.c	Tue Feb 13 16:32:11 2001
@@ -32,6 +32,7 @@
 #include <linux/delay.h>
 #include <linux/reboot.h>
 #include <linux/init.h>
+#include <linux/perfctr.h>
 #include <linux/mc146818rtc.h>
 
 #include <asm/uaccess.h>
@@ -467,7 +468,7 @@
  */
 void exit_thread(void)
 {
-	/* nothing to do ... */
+	perfctr_exit_thread(&current->thread);
 }
 
 void flush_thread(void)
@@ -484,6 +485,7 @@
 
 void release_thread(struct task_struct *dead_task)
 {
+	perfctr_release_thread(&current->thread, &dead_task->thread);
 	if (dead_task->mm) {
 		void * ldt = dead_task->mm->context.segments;
 
@@ -548,6 +550,8 @@
 	unlazy_fpu(current);
 	struct_cpy(&p->thread.i387, &current->thread.i387);
 
+	perfctr_copy_thread(&p->thread, clone_flags);
+
 	return 0;
 }
 
@@ -630,6 +634,8 @@
 				 *next = &next_p->thread;
 	struct tss_struct *tss = init_tss + smp_processor_id();
 
+	perfctr_suspend_thread(prev);
+
 	unlazy_fpu(prev_p);
 
 	/*
@@ -685,11 +691,13 @@
 			 */
 			tss->bitmap = INVALID_IO_BITMAP_OFFSET;
 	}
+
+	perfctr_resume_thread(next);
 }
 
 asmlinkage int sys_fork(struct pt_regs regs)
 {
-	return do_fork(SIGCHLD, regs.esp, &regs, 0);
+	return do_fork(CLONE_PERFCTR | SIGCHLD, regs.esp, &regs, 0);
 }
 
 asmlinkage int sys_clone(struct pt_regs regs)
@@ -716,7 +724,7 @@
  */
 asmlinkage int sys_vfork(struct pt_regs regs)
 {
-	return do_fork(CLONE_VFORK | CLONE_VM | SIGCHLD, regs.esp, &regs, 0);
+	return do_fork(CLONE_PERFCTR | CLONE_VFORK | CLONE_VM | SIGCHLD, regs.esp, &regs, 0);
 }
 
 /*
--- linux-2.4.1-perfctr/arch/i386/kernel/setup.c.~1~	Tue Jan 30 15:07:29 2001
+++ linux-2.4.1-perfctr/arch/i386/kernel/setup.c	Tue Feb 13 16:32:11 2001
@@ -98,6 +98,7 @@
 #include <asm/dma.h>
 #include <asm/mpspec.h>
 #include <asm/mmu_context.h>
+#include <asm/perfctr.h>
 /*
  * Machine setup..
  */
@@ -2065,7 +2066,7 @@
 void __init dodgy_tsc(void)
 {
 	get_cpu_vendor(&boot_cpu_data);
-
+	perfctr_dodgy_tsc();
 	if ( boot_cpu_data.x86_vendor == X86_VENDOR_CYRIX )
 		init_cyrix(&boot_cpu_data);
 }
--- linux-2.4.1-perfctr/drivers/Makefile.~1~	Mon Jan  1 14:03:43 2001
+++ linux-2.4.1-perfctr/drivers/Makefile	Tue Feb 13 16:32:11 2001
@@ -43,5 +43,8 @@
 subdir-$(CONFIG_I2C)		+= i2c
 subdir-$(CONFIG_ACPI)		+= acpi
 
+mod-subdirs += perfctr
+subdir-$(CONFIG_KPERFCTR)	+= perfctr
+
 include $(TOPDIR)/Rules.make
 
--- linux-2.4.1-perfctr/fs/proc/base.c.~1~	Mon Nov 20 18:54:29 2000
+++ linux-2.4.1-perfctr/fs/proc/base.c	Tue Feb 13 16:32:11 2001
@@ -23,6 +23,7 @@
 #include <linux/init.h>
 #include <linux/file.h>
 #include <linux/string.h>
+#include <linux/perfctr.h>
 
 /*
  * For hysterical raisins we keep the same inumbers as in the old procfs.
@@ -495,6 +496,7 @@
 	PROC_PID_STATM,
 	PROC_PID_MAPS,
 	PROC_PID_CPU,
+	PROC_PID_PERFCTR,
 	PROC_PID_FD_DIR = 0x8000,	/* 0x8000-0xffff */
 };
 
@@ -514,6 +516,9 @@
   E(PROC_PID_CWD,	"cwd",		S_IFLNK|S_IRWXUGO),
   E(PROC_PID_ROOT,	"root",		S_IFLNK|S_IRWXUGO),
   E(PROC_PID_EXE,	"exe",		S_IFLNK|S_IRWXUGO),
+#ifdef CONFIG_VPERFCTR_PROC
+  E(PROC_PID_PERFCTR,	"perfctr",	PERFCTR_PROC_PID_MODE),
+#endif
   {0,0,NULL,0}
 };
 #undef E
@@ -860,6 +865,11 @@
 			inode->i_op = &proc_mem_inode_operations;
 			inode->i_fop = &proc_mem_operations;
 			break;
+#ifdef CONFIG_VPERFCTR_PROC
+		case PROC_PID_PERFCTR:
+			perfctr_set_proc_pid_ops(inode);
+			break;
+#endif
 		default:
 			printk("procfs: impossible type (%d)",p->type);
 			iput(inode);
--- linux-2.4.1-perfctr/include/asm-i386/processor.h.~1~	Mon Jan  1 14:03:50 2001
+++ linux-2.4.1-perfctr/include/asm-i386/processor.h	Tue Feb 13 16:32:11 2001
@@ -355,6 +355,11 @@
 	unsigned long __cacheline_filler[5];
 };
 
+/*
+ * Virtual per-process performance-monitoring counters.
+ */
+struct vperfctr;	/* opaque; no need to depend on <linux/perfctr.h> */
+
 struct thread_struct {
 	unsigned long	esp0;
 	unsigned long	eip;
@@ -374,6 +379,8 @@
 /* IO permissions */
 	int		ioperm;
 	unsigned long	io_bitmap[IO_BITMAP_SIZE+1];
+/* performance counters */
+	struct vperfctr *perfctr;
 };
 
 #define INIT_THREAD  {						\
@@ -383,7 +390,8 @@
 	0, 0, 0,						\
 	{ { 0, }, },		/* 387 state */			\
 	0,0,0,0,0,0,						\
-	0,{~0,}			/* io permissions */		\
+	0,{~0,},		/* io permissions */		\
+	NULL,			/* performance counters */	\
 }
 
 #define INIT_MMAP \
--- linux-2.4.1-perfctr/include/linux/sched.h.~1~	Tue Jan 30 15:07:30 2001
+++ linux-2.4.1-perfctr/include/linux/sched.h	Tue Feb 13 16:32:11 2001
@@ -40,6 +40,7 @@
 #define CLONE_VFORK	0x00004000	/* set if the parent wants the child to wake it up on mm_release */
 #define CLONE_PARENT	0x00008000	/* set if we want to have the same parent as the cloner */
 #define CLONE_THREAD	0x00010000	/* Same thread group? */
+#define CLONE_PERFCTR	0x00020000	/* set if child should inherit perfctrs */
 
 #define CLONE_SIGNAL	(CLONE_SIGHAND | CLONE_THREAD)
 
