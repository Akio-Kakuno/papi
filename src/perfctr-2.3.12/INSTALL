$Id$

		    INSTALLATION INSTRUCTIONS
		    =========================

KERNEL
------
The kernel source code of this package consists of two parts:
the driver proper, and patches to integrate it into various
versions of the kernel.

The recommended kernel build and installation procedure is as follows:

1. Get the source code for the kernel of your choice, and unpack it
   in any directory.

   In your shell, `cd' to the kernel source directory.

   Save a copy of the .config file if it exists and you need it later.
   Then `make mrproper' (this is VERY important).

2. Apply all patches for all add-on features you want in this kernel.

   The perfctr patch files are located in the `patches' directory in
   this package. Assume this package was unpacked as directory PDIR,
   your kernel version is KVER, and there is a file in `patches' named:

	patch-kernel-$KVER

   In your shell, `cd' to your kernel source directory and apply this
   patch with `patch -p1 < $PDIR/patches/patch-kernel-$KVER'.

   This may cause some warnings if your kernel source code is not
   identical to the one for which the patch was created, but as long
   as there are no rejects, things should be Ok.

   Note: Vendor kernels can be very different from standard kernels, so
   make sure you apply the correct patch file! patches/patch-kernel-2.x.y
   won't necessarily work with a vendor kernel named 2.x.y-something!

   IF ANY PART OF THE PATCH IS REJECTED, IT IS IMPERATIVE THAT YOU
   RESOLVE THE PROBLEM BEFORE ATTEMPTING TO BUILD AND USE THE KERNEL.

   The driver source code proper is located in the `linux' directory
   in this package. This directory contains new files to be added
   to your kernel source code. In your shell, `cd' to your kernel source
   directory and copy the files by executing:

	tar -C $PDIR/linux -cf - . | tar -xvf -

   In the kernel source directory, edit Makefile and change EXTRAVERSION
   to include something unique for THIS kernel, for example by appending
   "-perfctr" (without the quotes). While not strictly necessary, this
   step is strongly recommended if you are adding the perfctr driver to
   a kernel version which is already installed on the machine.

3. If you have a saved .config file, copy it to the kernel source directory.
   Then configure the kernel using your favorite kernel configuration tool,
   for instance `make menuconfig' or `make config'.

   You should either configure with modules (CONFIG_MODULES=y) AND module
   versions (CONFIG_MODVERSIONS=y), or completely without modules
   (CONFIG_MODULES=n). Modules without module versions is an inherently
   unsafe configuration which is not recommended.

   You should also enable at least CONFIG_PERFCTR, CONFIG_PERFCTR_VIRTUAL,
   and CONFIG_PERFCTR_GLOBAL.

   You may also select CONFIG_PERFCTR=m to build the bulk of the driver
   as a loadable kernel module; the module will be named `perfctr.o'.

   Note: The perfctr kernel patch adds one word to the `thread_struct'
   type, which makes the patched kernel binary incompatible with an
   unpatched one. This is why it is important to distinguish the patched
   kernel via EXTRAVERSION and CONFIG_MODVERSIONS.

4. `make dep modules vmlinux'. This compiles the kernel and its modules.

5. As root, `make modules_install' to install the modules under /lib/modules/.

6. As root, edit /etc/lilo.conf to include a new entry for the new kernel.
   Copy an existing entry and edit the image= and label= lines to reflect
   the new kernel's name, including whatever you put in EXTRAVERSION.
   Then `make install' to install the new kernel's boot image and update
   the boot loader.

   Non-LILO users will have to adapt this step to whatever boot method
   they are using.

7. Reboot the machine.


DEVICE FILE
-----------
The global-mode perfctr facility is implemented as a character device
driver, which has been assigned major number 10 and minor number 182.
The first time you install the package, a special file representing
this device must be created. As root, execute:

	mknod /dev/perfctr c 10 182
	chmod 644 /dev/perfctr

If the driver was built as a module, it will be have to be loaded
into the kernel before it can be used. This will happen automatically
if the kernel was built with support for the kernel module loader
(CONFIG_KMOD=y), and you add the following to /etc/modules.conf:

	alias char-major-10-182 perfctr


LIBRARY
-------
To build the user-space library and the example programs, simply run

	make

The source code directory of the patched kernel you built and installed
above does not have to be available when you build the library.
