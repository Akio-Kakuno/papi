#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT(FULL-PACKAGE-NAME, VERSION, BUG-REPORT-ADDRESS)
AC_CONFIG_SRCDIR([papi.c])
AC_CONFIG_HEADER([config.h])

#checking for OS
OS="`uname | tr '[A-Z]' '[a-z]'`"
case "$OS" in
  cygwin*) OS=cygwin;;
  SunOS)   OS=solaris ;;
  sunos)   OS=solaris ;;
  irix64)  OS=irix ;;
  "unicos/mp") OS=unicos;;
esac

T3EOS="`uname -a | tr '[A-Z]' '[a-z]' | grep unicos`"
if test "$T3EOS" != ""; then
   OS=unicos
fi

#echo $OS
#AC_SUBST($OS)

#checking for OS version number
case "$OS" in
  aix) OSVER="`uname -v`";;
  irix) OSVER="`uname -r`";;
  linux) OSVER="`uname -r`";;
  netbsd) OSVER="`uname -r`";;
  osf1) OSVER="`uname -r | sed -e 's/^V//'`" ;;
  solaris) OSVER="`uname -r`";;
esac
#echo $OSVER
#AC_SUBST($OSVER)

#checking for CPU
R="(R)"
tm="(tm)"
TM="(TM)"
CPU=""
case "$OS" in
  aix)
         CPU="`/usr/sbin/lsattr -E -l proc0 | grep type | cut -d '_' -f 2 | cut -d ' ' -f 1 | tr '[A-Z]' '[a-z]'`"
         if test "$CPU" = ""; then
         CPU="`/usr/sbin/lsattr -E -l proc1 | grep type | cut -d '_' -f 2 | cut -d ' ' -f 1 | tr '[A-Z]' '[a-z]'`"
         fi
         ;;
  linux) 
         if test "`cat /proc/cpuinfo | grep GenuineIntel`" != "" ; then
           made=GenuineIntel
           family="`cat /proc/cpuinfo | grep family | cut -d: -f2 | cut -d' ' -f2 | sed '2,$d'`"
           model="`cat /proc/cpuinfo | grep model | cut -d: -f2 | cut -d' ' -f2 | sed '2,$d'`"
           if test "$family" = "15"; then
             if test "$model" = "3"; then
               CPU=em64t
             fi
           fi
           if test "$CPU" = "" ; then       
             if test "`cat /proc/cpuinfo | grep "Pentium${R} 4"`" != ""; then
               CPU=p4
             elif test "`cat /proc/cpuinfo | grep "Itanium 2"`" != ""; then
               CPU=itanium2 
             elif test "`cat /proc/cpuinfo | grep Itanium`" != ""; then
               CPU=itanium
             else CPU=p3
             fi
           fi 
         elif test "`cat /proc/cpuinfo | grep AuthenticAMD`" != ""; then
           made=AuthenticAMD
           if test "`cat /proc/cpuinfo | grep "Athlon${tm} 64"`" != ""; then
             CPU=opteron
           else CPU=athlon
           fi
           family="`cat /proc/cpuinfo | grep family | cut -d: -f2 | cut -d' ' -f2 | sed '2,$d'`"
           model="`cat /proc/cpuinfo | grep model | cut -d: -f2 | cut -d' ' -f2 | sed '2,$d'`"
           if test "$family" = "15"; then
             if test "$model" = "5"; then
               CPU=opteron
             fi
           fi
         fi
             
         ;;
  solaris) 
         processor=`uname -p`
           #this determines if its an Ultrasparc I,II,or III
         if test "$processor" = "sparc"; then
           CPU=`/bin/uname -a | egrep Ultra`
           if test "$CPU" = ""; then
             echo "Sorry but for Solaris you need to have an Ultrasparc for PAPI to work"
             exit 1
           else CPU=ultra
           fi
         fi
         ;;
  irix) CPU=`hinv -t cpu | cut -d ' ' -f 2 | tr '[A-Z]' '[a-z]'`;;
  osf1) CPU=`uname -p`;;
  unicos)
        if test "`uname -a | tr '[A-Z]' '[a-z]' | grep crayx1`" != ""; then
          CPU=x1-msp
        fi
        if test "`uname -a | tr '[A-Z]' '[a-z]' | grep t3e`" != ""; then
          CPU=t3e
        fi
        ;;
esac 
#echo $CPU
#AC_SUBST($CPU)

AC_ARG_WITH(bitmode,
            [  --with-bitmode=64       Specify to build 64 bit mode library],
            [bitmode="$with_bitmode"],
            [bitmode=32]
            )
#echo $bitmode
case "$bitmode" in
   64)
      BM="-64bit" ;;
   32)
      BM="" ;;
    *)
      echo "The bitmode "$with_bitmode" you specified is not supported"
      exit -1
      ;;
esac

AC_ARG_WITH(pmapi,
            [  --with-pmapi=<path>     Specify path of pmapi on aix system ],
            [pmapi=$withval],
            [pmapi=default]
            )
case "$OS" in
   aix)
      case "$pmapi" in
         default)
             case "$CPU" in
                power3) PMAPI="/usr/lpp/pmtoolkit" ;;
                power4) PMAPI="/usr/pmapi" ;;
             esac
	     ;;
         *)
             PMAPI="$pmapi" ;;
      esac
      ;;
   *)
      case "$pmapi" in
         default) ;;
         *)  echo "pmapi is not needed on this platform" 
	     ;;
      esac
      PMAPI=""
      ;;
esac 
#AC_MSG_RESULT($PMAPI)
AC_SUBST(PMAPI)

case "$OS" in
   aix)
      if test "${OSVER}" = "5"; then
         if test "${CPU}" = "power3"; then 
               MAKEVER="$OS""$OSVER"-"$CPU""$BM"
         else
               MAKEVER="$OS"-"$CPU""$BM"
         fi
      else
         if test "${CPU}" = "power3"; then   
            if test "${bitmode}" = "64"; then
              echo "The bitmode "$with_bitmode" you specified is not supported"
              exit -1
            fi
            MAKEVER="$OS"-"$CPU"
         else
               MAKEVER="$OS"-"$CPU""$BM"
         fi
       fi
       ;;
   solaris)
       MAKEVER="$OS"-"$CPU""$BM"
       ;;
   linux) 
       case "$CPU" in
            alpha)
                 if test "${bitmode}" = "64"; then
                   echo "The bitmode "$with_bitmode" you specified is not supported"
                   exit -1
                 fi
                 MAKEVER="$OS"-"$CPU" ;;
            itanium)
                 if test "${bitmode}" = "32"; then
                   echo "The bitmode "$with_bitmode" you specified is not supported"
                   exit -1
                 fi
                 MAKEVER="$OS"-pfm-"$CPU" ;;
            itanium2)
                 if test "${bitmode}" = "32"; then
                   echo "The bitmode "$with_bitmode" you specified is not supported"
                   exit -1
                 fi
                 MAKEVER="$OS"-pfm-"$CPU" ;;
            athlon)
                 if test "${bitmode}" = "64"; then
                   echo "The bitmode "$with_bitmode" you specified is not supported"
                   exit -1
                 fi
                 MAKEVER="$OS"-perfctr-"$CPU" ;;
            opteron)
                 if test "${bitmode}" = "32"; then
                   echo "The bitmode "$with_bitmode" you specified is not supported"
                   exit -1
                 fi
                 MAKEVER="$OS"-perfctr-"$CPU" ;;
            p4)
                 if test "${bitmode}" = "64"; then
                   echo "The bitmode "$with_bitmode" you specified is not supported"
                   exit -1
                 fi
                 MAKEVER="$OS"-perfctr-"$CPU" ;;
            p3)
                 if test "${bitmode}" = "64"; then
                   echo "The bitmode "$with_bitmode" you specified is not supported"
                   exit -1
                 fi
                 MAKEVER="$OS"-perfctr-"$CPU" ;;
       esac
       ;;
  irix)
       MAKEVER="$OS"-"$CPU""$BM"
       ;;
  osf1)
       case "$CPU" in
            alpha)
                 MAKEVER=tru64-"$CPU" ;;
       esac
       ;;
  unicos)
                 MAKEVER="$OS"-"$CPU" ;;
esac
#echo $MAKEVER
case "$MAKEVER" in 
    aix-power3);;
    aix-power4);;
    aix-power4-64bit);;
    aix5-power3);;
    aix5-power3-64bit);;
    dadd-alpha);;
    irix-mips);;
    irix-mips-64bit);;
    linux-alpha);;
    linux-perfctr-athlon);;
    linux-perfctr-em64t);;
    linux-perfctr-opteron);;
    linux-perfctr-p3);;
    linux-perfctr-p4);;
    linux-pfm-itanium);;
    linux-pfm-itanium2);;
    solaris-ultra);;
    solaris-ultra-64bit);;
    tru64-alpha);;
    unicos-t3e);;
    unicos-x1-msp);;
    unicos-x1-ssp);;
    *)
    echo Platform $MAKEVER is not supported
    exit -1
    ;;
esac

AC_SUBST(MAKEVER)
AC_SUBST(prefix)

# Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CPP
#AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

# Checks for libraries.
if test "$OS" = "solaris"; then
AC_CHECK_LIB([cpc], [cpc_take_sample])
fi

AC_CHECK_LIB([dl], [dlopen])

AC_CHECK_LIB([m], [sqrt])

if test "$CPU" = "itanium"; then
AC_CHECK_LIB([pfm], [pfm_initialize])
fi
if test "$CPU" = "itanium2"; then
AC_CHECK_LIB([pfm], [pfm_initialize])
fi

if test "$OS" = "aix"; then
AC_CHECK_LIB([pmapi], [pm_init])
fi

AC_CHECK_LIB([pthread], [pthread_self])

if test "$OS" = "osf1"; then
AC_CHECK_LIB([rt], [clock_gettime])
fi

# FIXME: Replace `main' with a function in `-llipr':
AC_CHECK_LIB([lipr], [main])

# Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
#AC_CHECK_HEADERS([fcntl.h inttypes.h limits.h malloc.h memory.h stddef.h stdlib.h string.h sys/ioctl.h sys/socket.h sys/systeminfo.h sys/time.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_UID_T
AC_C_INLINE
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_CHECK_DECLS([sys_siglist])
AC_HEADER_TIME
AC_C_VOLATILE

# Checks for library functions.
AC_FUNC_FORK
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_FUNC_MMAP
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_SETVBUF_REVERSED
AC_TYPE_SIGNAL
AC_FUNC_STRCOLL
AC_FUNC_STRERROR_R
AC_FUNC_VPRINTF
#AC_CHECK_FUNCS([bzero clock_gettime getcwd gethrtime getpagesize gettimeofday memchr memmove memset munmap realpath select sqrt strcasecmp strchr strcspn strdup strerror strncasecmp strpbrk strrchr strspn strstr strtol strtoul sysinfo uname])



get_bitmode()
{
 input="bad"
 while [ test "${input}" != "ok" ]
 do
   input="ok"
   echo 
   echo "Do you want to install 64bit mode library?"
   echo 
   echo -n "Choice is required [yes/no]: "
   read num
   case "${num}" in
     yes)
        bitmode=64
        ;;
     no)
        bitmode=""
        ;;
     *)
        echo
        echo Warning: invalid choice \'$num\'. Type again.
        echo
        input="bad"
        ;;
   esac
 done
}


AC_CONFIG_FILES([Makefile])
AC_OUTPUT
