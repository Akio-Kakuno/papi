--- linux-2.2.16-perfctr/CREDITS.~1~	Sun Aug 19 17:11:11 2001
+++ linux-2.2.16-perfctr/CREDITS	Sun Aug 19 17:11:38 2001
@@ -1607,6 +1607,12 @@
 D: implemented kmod
 D: modularized BSD Unix domain sockets
 
+N: Mikael Pettersson
+E: mikpe@csd.uu.se
+W: http://www.csd.uu.se/~mikpe/
+D: Miscellaneous fixes
+D: Performance-monitoring counters driver
+
 N: Reed H. Petty
 E: rhp@draper.net
 W: http://www.draper.net
--- linux-2.2.16-perfctr/Documentation/Configure.help.~1~	Sun Aug 19 17:11:11 2001
+++ linux-2.2.16-perfctr/Documentation/Configure.help	Sun Aug 19 17:11:44 2001
@@ -1662,6 +1662,72 @@
 
   If you don't know what to do, choose "386".
 
+Performance-monitoring counters support
+CONFIG_PERFCTR
+  This driver provides access to the performance-monitoring counter
+  registers available in some (but not all) modern processors.
+  These special-purpose registers can be programmed to count low-level
+  performance-related events which occur during program execution,
+  such as cache misses, pipeline stalls, etc.
+
+  The driver supports most x86-class processors known to have
+  performance-monitoring counters: Intel Pentium to Pentium III,
+  AMD K7, Cyrix 6x86MX/MII/III, VIA C3, and WinChip C6/2/3.
+
+  On processors which have a time-stamp counter but no performance-
+  monitoring counters, such as the AMD K6 family, the driver supports
+  plain cycle-count performance measurements only.
+
+  On WinChip C6/2/3 processors the performance-monitoring counters
+  cannot be used unless the time-stamp counter has been disabled.
+  Please read <file:drivers/perfctr/x86.c> for further information.
+
+  You can safely say Y here, even if you intend to run the kernel
+  on a processor without performance-monitoring counters.
+
+  You can also say M here to compile the driver as a module; the
+  module will be called `perfctr.o'.
+
+Additional internal consistency checks
+CONFIG_PERFCTR_DEBUG
+  This option enables additional internal consistency checking in
+  the perfctr driver. The scope of these checks is unspecified and
+  may vary between different versions of the driver.
+
+  Enabling this option will reduce performance, so say N unless you
+  are debugging the driver.
+
+Init-time hardware tests
+CONFIG_PERFCTR_INIT_TESTS
+  This option makes the driver run additional hardware tests
+  during initialisation. This is not necessary for normal
+  operation, but it can be useful during driver development.
+
+  If unsure, say N.
+
+Virtual performance counters support
+CONFIG_PERFCTR_VIRTUAL
+  The processor's performance-monitoring counters are special-purpose
+  global registers. This option adds support for virtual per-process
+  performance-monitoring counters which only run when the process
+  to which they belong is executing. This improves the accuracy of
+  performance measurements by reducing "noise" from other processes.
+
+  Say Y.
+
+Global performance counters support
+CONFIG_PERFCTR_GLOBAL
+  This option adds driver support for global-mode (system-wide)
+  performance-monitoring counters. In this mode, the driver allows
+  each performance-monitoring counter on each processor to be
+  controlled and read. The driver provides a sampling timer to
+  maintain 64-bit accumulated event counts.
+
+  Global-mode performance counters cannot be used if some process
+  is currently using virtual-mode performance counters, and vice versa.
+
+  Say Y.
+
 VGA text console
 CONFIG_VGA_CONSOLE
   Saying Y here will allow you to use Linux in text mode through a
--- linux-2.2.16-perfctr/Documentation/ioctl-number.txt.~1~	Sun Aug 19 17:05:52 2001
+++ linux-2.2.16-perfctr/Documentation/ioctl-number.txt	Sun Aug 19 17:11:38 2001
@@ -130,3 +130,5 @@
 0xA3	90-9F	DoubleTalk driver	in development:
 					<mailto:jrv@vanzandt.mv.com>
 0xAB	00-06	Network block device
+0xD0	all	performance counters	in development:
+					<mailto:mikpe@csd.uu.se>
--- linux-2.2.16-perfctr/MAINTAINERS.~1~	Sun Aug 19 17:11:11 2001
+++ linux-2.2.16-perfctr/MAINTAINERS	Sun Aug 19 17:11:38 2001
@@ -712,6 +712,12 @@
 L:	linux-net@vger.rutgers.edu
 S:	Maintained
 
+PERFORMANCE-MONITORING COUNTERS DRIVER
+P:	Mikael Pettersson
+M:	mikpe@csd.uu.se
+W:	http://www.csd.uu.se/~mikpe/linux/perfctr/
+S:	Maintained
+
 PNP SUPPORT
 P:	Tom Lees
 M:	tom@lpsg.demon.co.uk
--- linux-2.2.16-perfctr/Makefile.~1~	Sun Aug 19 17:11:11 2001
+++ linux-2.2.16-perfctr/Makefile	Sun Aug 19 17:11:38 2001
@@ -210,6 +210,10 @@
 DRIVERS := $(DRIVERS) drivers/telephony/telephony.a
 endif
 
+ifdef CONFIG_PERFCTR
+DRIVERS += drivers/perfctr/kperfctr.o
+endif
+
 include arch/$(ARCH)/Makefile
 
 .S.s:
--- linux-2.2.16-perfctr/arch/i386/config.in.~1~	Sun Aug 19 17:11:11 2001
+++ linux-2.2.16-perfctr/arch/i386/config.in	Sun Aug 19 17:11:38 2001
@@ -4,6 +4,8 @@
 #
 mainmenu_name "Linux Kernel Configuration"
 
+define_bool CONFIG_X86 y
+
 mainmenu_option next_comment
 comment 'Code maturity level options'
 bool 'Prompt for development and/or incomplete code/drivers' CONFIG_EXPERIMENTAL
@@ -73,6 +75,7 @@
   fi
   bool '   Backward-compatible /proc/pci' CONFIG_PCI_OLD_PROC
 fi
+source drivers/perfctr/Config.in
 bool 'MCA support' CONFIG_MCA
 bool 'SGI Visual Workstation support' CONFIG_VISWS
 if [ "$CONFIG_VISWS" = "y" ]; then
--- linux-2.2.16-perfctr/arch/i386/kernel/process.c.~1~	Sun Aug 19 17:05:52 2001
+++ linux-2.2.16-perfctr/arch/i386/kernel/process.c	Sun Aug 19 17:11:38 2001
@@ -31,6 +31,7 @@
 #include <linux/smp.h>
 #include <linux/reboot.h>
 #include <linux/init.h>
+#include <linux/perfctr.h>
 
 #include <asm/uaccess.h>
 #include <asm/pgtable.h>
@@ -520,7 +521,7 @@
  */
 void exit_thread(void)
 {
-	/* nothing to do ... */
+	perfctr_exit_thread(&current->tss);
 }
 
 void flush_thread(void)
@@ -606,6 +607,8 @@
 	unlazy_fpu(current);
 	p->tss.i387 = current->tss.i387;
 
+	perfctr_copy_thread(&p->tss);
+
 	return 0;
 }
 
@@ -702,6 +705,8 @@
  */
 void __switch_to(struct task_struct *prev, struct task_struct *next)
 {
+	perfctr_suspend_thread(&prev->tss);
+
 	/* Do the FPU save and set TS if it wasn't set before.. */
 	unlazy_fpu(prev);
 
@@ -755,6 +760,8 @@
 		loaddebug(next,6);
 		loaddebug(next,7);
 	}
+
+	perfctr_resume_thread(&next->tss);
 }
 
 asmlinkage int sys_fork(struct pt_regs regs)
--- linux-2.2.16-perfctr/arch/i386/kernel/setup.c.~1~	Sun Aug 19 17:11:11 2001
+++ linux-2.2.16-perfctr/arch/i386/kernel/setup.c	Sun Aug 19 17:11:44 2001
@@ -262,6 +262,23 @@
        char saved_command_line[COMMAND_LINE_SIZE];
 unsigned long i386_endbase __initdata =  0;
 
+#ifndef CONFIG_X86_TSC
+static int tsc_disable __initdata = 0;
+
+static void __init maybe_disable_tsc(struct cpuinfo_x86 *c)
+{
+	unsigned int cr4;
+
+	if (tsc_disable && (c->x86_capability & X86_FEATURE_TSC)) {
+		printk(KERN_NOTICE "Disabling TSC\n");
+		c->x86_capability &= ~X86_FEATURE_TSC;
+		asm volatile("movl %%cr4,%0" : "=r"(cr4));
+		cr4 |= 0x0004;
+		asm volatile("movl %0,%%cr4" : : "r"(cr4));
+	}
+}
+#endif
+
 __initfunc(void setup_arch(char **cmdline_p,
 	unsigned long * memory_start_p, unsigned long * memory_end_p))
 {
@@ -342,6 +359,14 @@
 			i386_endbase += PAGE_OFFSET;
 			read_endbase_from_BIOS = 0;
 		}
+#ifndef CONFIG_X86_TSC
+		else if (c == ' ' && !memcmp(from, "notsc", 5)) {
+			if (to != command_line) --to;
+			from += 5;
+			tsc_disable = 1;
+			maybe_disable_tsc(&boot_cpu_data);
+		}
+#endif
 		c = *(from++);
 		if (!c)
 			break;
@@ -810,6 +835,10 @@
 	c->x86_cache_size = -1;
 
 	get_cpu_vendor(c);
+
+#ifndef CONFIG_X86_TSC
+	maybe_disable_tsc(c);
+#endif
 
 	if (c->x86_vendor == X86_VENDOR_UNKNOWN &&
 	    c->cpuid_level < 0)
--- linux-2.2.16-perfctr/drivers/Makefile.~1~	Sun Aug 19 17:05:53 2001
+++ linux-2.2.16-perfctr/drivers/Makefile	Sun Aug 19 17:11:38 2001
@@ -128,6 +128,15 @@
   endif
 endif
 
+ALL_SUB_DIRS += perfctr
+ifeq ($(CONFIG_PERFCTR),y)
+SUB_DIRS += perfctr
+else
+  ifeq ($(CONFIG_PERFCTR),m)
+  SUB_DIRS += perfctr
+  MOD_SUB_DIRS += perfctr
+  endif
+endif
 
 
 # When MOD_LIST_NAME is set, make will try to add $(MOD_SUB_DIRS).o to
--- linux-2.2.16-perfctr/drivers/char/misc.c.~1~	Sun Aug 19 17:11:12 2001
+++ linux-2.2.16-perfctr/drivers/char/misc.c	Sun Aug 19 17:11:38 2001
@@ -85,6 +85,7 @@
 extern void hfmodem_init(void);
 extern int pc110pad_init(void);
 extern int pmu_device_init(void);
+extern int perfctr_init(void);
 
 static int misc_read_proc(char *buf, char **start, off_t offset,
 			  int len, int *eof, void *private)
@@ -277,6 +278,9 @@
 #endif
 #ifdef CONFIG_SGI
 	streamable_init ();
+#endif
+#ifdef CONFIG_PERFCTR
+	perfctr_init();
 #endif
 	if (register_chrdev(MISC_MAJOR,"misc",&misc_fops)) {
 		printk("unable to get major %d for misc devices\n",
--- linux-2.2.16-perfctr/fs/proc/base.c.~1~	Wed Aug 26 19:04:55 1998
+++ linux-2.2.16-perfctr/fs/proc/base.c	Sun Aug 19 17:11:38 2001
@@ -14,6 +14,7 @@
 #include <linux/proc_fs.h>
 #include <linux/stat.h>
 #include <linux/init.h>
+#include <linux/perfctr.h>
 
 static struct file_operations proc_base_operations = {
 	NULL,			/* lseek - default */
@@ -175,6 +176,15 @@
 };
 #endif
 
+#ifdef CONFIG_PERFCTR_VIRTUAL
+static struct proc_dir_entry proc_pid_perfctr = {
+	PROC_PID_PERFCTR, 7, "perfctr",
+	PERFCTR_PROC_PID_MODE, 1, 0, 0,
+	0, &perfctr_proc_pid_inode_operations,
+	NULL, proc_pid_fill_inode,
+};
+#endif
+
 __initfunc(void proc_base_init(void))
 {
 #if CONFIG_AP1000
@@ -194,6 +204,9 @@
 #ifdef __SMP__	
 	proc_register(&proc_pid, &proc_pid_cpu);
 #endif	
+#ifdef CONFIG_PERFCTR_VIRTUAL
+	proc_register(&proc_pid, &proc_pid_perfctr);
+#endif
 };
 
 
--- linux-2.2.16-perfctr/include/asm-i386/processor.h.~1~	Sun Aug 19 17:11:14 2001
+++ linux-2.2.16-perfctr/include/asm-i386/processor.h	Sun Aug 19 17:11:38 2001
@@ -13,6 +13,11 @@
 #include <asm/page.h>
 
 /*
+ * Virtual per-process performance-monitoring counters.
+ */
+struct vperfctr;	/* opaque; no need to depend on <linux/perfctr.h> */
+
+/*
  *  CPU type and hardware bug flags. Kept separately for each CPU.
  *  Members of this structure are referenced in head.S, so think twice
  *  before touching them. [mj]
@@ -242,6 +247,8 @@
 	struct vm86_struct * vm86_info;
 	unsigned long screen_bitmap;
 	unsigned long v86flags, v86mask, v86mode, saved_esp0;
+/* performance counters */
+	struct vperfctr *perfctr;
 };
 
 #define INIT_MMAP \
@@ -265,6 +272,7 @@
 	{ 0, },							\
 	{ { 0, }, },  /* 387 state */				\
 	NULL, 0, 0, 0, 0, 0, /* vm86_info */			\
+	NULL, /* performance counters */			\
 }
 
 #define start_thread(regs, new_eip, new_esp) do {		\
--- linux-2.2.16-perfctr/include/linux/proc_fs.h.~1~	Sun Aug 19 17:05:58 2001
+++ linux-2.2.16-perfctr/include/linux/proc_fs.h	Sun Aug 19 17:11:38 2001
@@ -72,6 +72,7 @@
 	PROC_PID_RINGBUF,
 #endif
 	PROC_PID_CPU,
+	PROC_PID_PERFCTR,
 };
 
 enum pid_subdirectory_inos {
--- linux-2.2.16-perfctr/kernel/sched.c.~1~	Sun Aug 19 17:05:58 2001
+++ linux-2.2.16-perfctr/kernel/sched.c	Sun Aug 19 17:11:38 2001
@@ -31,6 +31,7 @@
 #include <linux/interrupt.h>
 #include <linux/smp_lock.h>
 #include <linux/init.h>
+#include <linux/perfctr.h>
 
 #include <asm/io.h>
 #include <asm/uaccess.h>
@@ -1475,6 +1476,7 @@
 	do_process_times(p, user, system);
 	do_it_virt(p, user);
 	do_it_prof(p, ticks);
+	perfctr_sample_thread(&p->tss);
 }	
 
 static void update_process_times(unsigned long ticks, unsigned long system)
