How do I use remote CVS anonymously?
------------------------------------

The first time, the Checkout phase:

> setenv CVSROOT :pserver:anonymous@icl.cs.utk.edu:/cvs/homes/papi
> cvs login
> Password: <cr>
> cvs co all|papi|src|man|spec|tools

The next time, the Update phase:

> cd <directory>
> cvs update

The last time: :-(

> cd <directory>
> cvs logout


How do I add a user 'username' to CVS?
--------------------------------------

0) You must be in the group papi. 
1) Login to nala.cs.utk.edu.
2) Make a temporary directory called foo.
3) Do the following:

> cd foo;
> cvs -d /cvs/homes/papi co CVSROOT
.
.
.
> cd CVSROOT
>

4) Add 'username' to the 'writers' file.
5) Add a password to the 'passwd' file with htpasswd program.

> /usr/local/apache/bin/htpasswd ~/tmp/CVSROOT/passwd 'username'
New password: <enter password>
Re-type new password: <again>
Added password for user 'username'
>

6) Commit the changes back to CVS.

> cvs commit -m "Added user 'username' to the cvs list"
.
.
.
cvs commit: Rebuilding administrative file database


How do I merge branches of the PAPI project back to the main trunk?
-------------------------------------------------------------------

1) Check out the main trunk of the PAPI project:
	> cvs checkout -P papi
2) Update the main trunk by joining with the branch:
	> cvs update -j papi-2-3-3
3) Tag the branch for future updates:
	> cvs tag papi-2-3-3m1
4) Resolve any outstanding conflicts

5) Commit the modified files back to the main trunk:
	> cvs commit ...
...later...
6) To merge from the same branch again, repeat the steps above,
	but update from the tag created in step 3 rather than 
	the branch point. This guarantees that only the changes
	made since the last merge are merged.


How do I add external code (like perfctr) to the papi cvs project?
------------------------------------------------------------------

The correct way to do it is:

Let's say we're adding a version of PerfCtr 2.6. PAPI keeps only
release and major versions of the PerfCtr patch externally. Internally
we track all PerfCtr versions as you will see from the CVS command line.
The naming scheme is <release>.<major>.<minor>

1) Untar the new distribution somewhere OUTSIDE of your CVS working dir and
   change directory to there.

	% cd /tmp; tar xfz perfctr-2.6.7.tar.gz
	% cd perfctr-2.6.7

2) Import the sources

	% cvs import -ko -m "Import of perfctr 2.6.7" papi/src/perfctr-2.6.x perfctr perfctr-2-6-7

Here perfctr is the "vendor tag" and perfctr-2-6-7 is the release
version.

Then if we have locally modified our copy (made changes to the distro)
CVS will warn us to merge in our changes. We do this by

cvs checkout -jperfctr:yesterday -jperfctr papi/src/perfctr

CVS will then do the merge for us. If there are any conflicts, we fix
them, then cvs commit them.

Got it? Good.

We should follow this model for all 3rd party sources in the source tree.

This is all available in further detail in the CVS Manual, under 'import'.

Good information is also available at:
http://efault.net/npat/docs_and_postings/cvs-tracking/cvs-tracking.txt

How do I remove a directory?
----------------------------

First you remove all the files in the directory (and all subdirectories). 
This can be tedious, so do it like this. This assumes GNU grep.

> cd <dir_to_be_removed>
> find . -type f | grep --invert-match CVS | xargs > /tmp/removeme

Now you have a list of all files in all subdirectories to be removed,
not including anything under CVS. Now edit the file and put 'rm' at the
start of the file.

> vi /tmp/removeme

So the start of the file looks like:
rm ./file1 ./dir2/file2 ....

Now execute the remove.

> sh /tmp/removeme

Good. Now tell CVS to remove the files. We have to edit the /tmp/removeme
again to replace 'rm' with 'cvs delete'.

> vi /tmp/removeme

So the start of the file looks like:
cvs delete ./file1 ./dir2/file2 ....

> sh /tmp/removeme

[ lots of CVS log messages ]

Now commit the changes with an informative log message.

> cvs commit.

